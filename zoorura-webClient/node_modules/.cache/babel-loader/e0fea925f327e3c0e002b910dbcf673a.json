{"ast":null,"code":"const fetch = require(\"node-fetch\");\n\nconst cheerio = require(\"cheerio\");\n\nconst USER_AGENT = \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3738.0 Safari/537.36\";\nconst REGEX = /^https?:\\/\\/(www\\.|vm\\.)?(tiktok\\.com)\\/?(.*)$/;\n\nclass Util {\n  /**\r\n   * Parses plain html of a given url\r\n   * @param {string} url Input url\r\n   * @returns {Promise<string>}\r\n   */\n  static async html(url) {\n    try {\n      let res = await fetch(url, {\n        headers: {\n          \"User-Agent\": USER_AGENT\n        }\n      });\n      let plainText = await res.text();\n      return plainText;\n    } catch (e) {\n      return \"\";\n    }\n  }\n  /**\r\n   * JQuery\r\n   * @param {string} html Input html\r\n   */\n\n\n  static getDocument(html) {\n    return cheerio.load(html);\n  }\n  /**\r\n   * Parses tiktok video details\r\n   * @param {string} raw raw data\r\n   */\n\n\n  static parseVideoData(raw) {\n    if (!raw) return null;\n\n    try {\n      const data = JSON.parse(raw);\n      const BASE = data.props.initialProps;\n      const author = data.props.pageProps.videoData.authorInfos;\n      const authorStats = data.props.pageProps.videoData.authorStats;\n      const music = data.props.pageProps.videoData.musicInfos;\n      const obj = {\n        id: data.props.pageProps.videoData.itemInfos.id,\n        title: data.props.pageProps.shareMeta.title,\n        description: data.props.pageProps.shareMeta.desc,\n        url: `https://${BASE[\"$host\"]}${BASE[\"$pageUrl\"]}`,\n        embedURL: `https://www.tiktok.com/oembed?url=https://${BASE[\"$host\"]}${BASE[\"$pageUrl\"]}`,\n        thumbnail: {\n          url: data.props.pageProps.shareMeta.image.url,\n          size: {\n            width: data.props.pageProps.shareMeta.image.width,\n            height: data.props.pageProps.shareMeta.image.height\n          }\n        },\n        country: BASE[\"$region\"],\n        streamURL: data.props.pageProps.videoData.itemInfos.video.urls[0] || null,\n        streams: data.props.pageProps.videoData.itemInfos.video.urls,\n        videoDetails: data.props.pageProps.videoData.itemInfos.video.videoMeta,\n        duration: data.props.pageProps.videoData.itemInfos.video.videoMeta.duration * 1000,\n        covers: data.props.pageProps.videoData.itemInfos.covers,\n        comments: data.props.pageProps.videoData.itemInfos.commentCount,\n        views: data.props.pageProps.videoData.itemInfos.playCount,\n        createTime: data.props.pageProps.videoData.itemInfos.createTime,\n        digg: data.props.pageProps.videoData.itemInfos.diggCount,\n        shares: data.props.pageProps.videoData.itemInfos.shareCount,\n        author: {\n          verified: author.verified,\n          secUid: author.secUid,\n          username: author.uniqueId,\n          id: author.userId,\n          displayName: author.nickName,\n          covers: author.covers,\n          profile: `https://${BASE[\"$host\"]}/@${author.uniqueId}`,\n          followers: authorStats.followerCount,\n          hearts: authorStats.heartCount\n        },\n        challenge: {\n          id: data.props.pageProps.videoData.challengeInfoList.challengeId || null,\n          name: data.props.pageProps.videoData.challengeInfoList.challengeName || null\n        },\n        music: {\n          id: music.musicId,\n          name: music.musicName,\n          author: music.authorName,\n          covers: music.covers\n        },\n        keywords: data.props.pageProps.metaParams.keywords.split(\",\").map(m => m.trim())\n      };\n      return obj;\n    } catch (e) {\n      return null;\n    }\n  }\n\n  static parseUserData(raw) {\n    if (!raw) return null;\n\n    try {\n      const data = JSON.parse(raw);\n      const BASE = data.props.pageProps;\n      const obj = {\n        id: BASE.userInfo.user.id,\n        username: BASE.uniqueId,\n        displayName: BASE.userInfo.user.nickname,\n        title: BASE.shareMeta.title,\n        description: BASE.shareMeta.desc,\n        profile: BASE.metaParams.canonicalHref,\n        avatars: {\n          thumbnail: BASE.userInfo.user.avatarThumb,\n          medium: BASE.userInfo.user.avatarMedium\n        },\n        signature: BASE.userInfo.user.signature,\n        verified: BASE.userInfo.user.verified,\n        private: BASE.userInfo.user.secret,\n        secUid: BASE.userInfo.user.secUid,\n        following: BASE.userInfo.stats.followingCount,\n        followers: BASE.userInfo.stats.followerCount,\n        hearts: BASE.userInfo.stats.heartCount,\n        videos: BASE.userInfo.stats.videoCount,\n        digg: BASE.userInfo.stats.diggCount\n      };\n      return obj;\n    } catch (e) {\n      return null;\n    }\n  }\n  /**\r\n   * Parses embed\r\n   * @param {string} url Embed url to parse\r\n   */\n\n\n  static async parseEmbed(url) {\n    try {\n      let data = await fetch(url);\n      let res = await data.json();\n      let obj = {\n        version: res.version,\n        type: res.type,\n        title: res.title,\n        author: {\n          username: res.author_name,\n          profile: res.author_url\n        },\n        scale: {\n          width: res.width,\n          height: res.height\n        },\n        html: res.html,\n        thumbnail: {\n          url: res.thumbnail_url,\n          height: res.thumbnail_height,\n          width: res.thumbnail_width\n        },\n        provider: {\n          name: res.provider_name,\n          url: res.provider_url\n        }\n      };\n      return obj;\n    } catch (e) {\n      return null;\n    }\n  }\n  /**\r\n   * Validates TikTok URL\r\n   * @param {string} url url to validate\r\n   */\n\n\n  static validate(url) {\n    if (!url || typeof url !== \"string\") return false;\n    return REGEX.test(url);\n  }\n\n}\n\nmodule.exports = Util;","map":{"version":3,"sources":["/Users/Zoorura/Documents/Projects/Zoorura/zoorura-web/node_modules/tiktok-search/src/Structures/Util.js"],"names":["fetch","require","cheerio","USER_AGENT","REGEX","Util","html","url","res","headers","plainText","text","e","getDocument","load","parseVideoData","raw","data","JSON","parse","BASE","props","initialProps","author","pageProps","videoData","authorInfos","authorStats","music","musicInfos","obj","id","itemInfos","title","shareMeta","description","desc","embedURL","thumbnail","image","size","width","height","country","streamURL","video","urls","streams","videoDetails","videoMeta","duration","covers","comments","commentCount","views","playCount","createTime","digg","diggCount","shares","shareCount","verified","secUid","username","uniqueId","userId","displayName","nickName","profile","followers","followerCount","hearts","heartCount","challenge","challengeInfoList","challengeId","name","challengeName","musicId","musicName","authorName","keywords","metaParams","split","map","m","trim","parseUserData","userInfo","user","nickname","canonicalHref","avatars","avatarThumb","medium","avatarMedium","signature","private","secret","following","stats","followingCount","videos","videoCount","parseEmbed","json","version","type","author_name","author_url","scale","thumbnail_url","thumbnail_height","thumbnail_width","provider","provider_name","provider_url","validate","test","module","exports"],"mappings":"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","sourcesContent":["const fetch = require(\"node-fetch\");\r\nconst cheerio = require(\"cheerio\");\r\nconst USER_AGENT = \"Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/75.0.3738.0 Safari/537.36\";\r\nconst REGEX = /^https?:\\/\\/(www\\.|vm\\.)?(tiktok\\.com)\\/?(.*)$/;\r\n\r\nclass Util {\r\n\r\n    /**\r\n     * Parses plain html of a given url\r\n     * @param {string} url Input url\r\n     * @returns {Promise<string>}\r\n     */\r\n    static async html(url) {\r\n        try {\r\n            let res = await fetch(url, {\r\n                headers: {\r\n                    \"User-Agent\": USER_AGENT\r\n                }\r\n            });\r\n            let plainText = await res.text();\r\n            return plainText;\r\n        } catch(e) {\r\n            return \"\";\r\n        }\r\n    }\r\n\r\n    /**\r\n     * JQuery\r\n     * @param {string} html Input html\r\n     */\r\n    static getDocument(html) {\r\n        return cheerio.load(html);\r\n    }\r\n\r\n    /**\r\n     * Parses tiktok video details\r\n     * @param {string} raw raw data\r\n     */\r\n    static parseVideoData(raw) {\r\n        if (!raw) return null;\r\n        try {\r\n            const data = JSON.parse(raw);\r\n            const BASE = data.props.initialProps;\r\n            const author = data.props.pageProps.videoData.authorInfos;\r\n            const authorStats = data.props.pageProps.videoData.authorStats;\r\n            const music = data.props.pageProps.videoData.musicInfos;\r\n\r\n            const obj = {\r\n                id: data.props.pageProps.videoData.itemInfos.id,\r\n                title: data.props.pageProps.shareMeta.title,\r\n                description: data.props.pageProps.shareMeta.desc,\r\n                url: `https://${BASE[\"$host\"]}${BASE[\"$pageUrl\"]}`,\r\n                embedURL: `https://www.tiktok.com/oembed?url=https://${BASE[\"$host\"]}${BASE[\"$pageUrl\"]}`,\r\n                thumbnail: {\r\n                    url: data.props.pageProps.shareMeta.image.url,\r\n                    size: {\r\n                        width: data.props.pageProps.shareMeta.image.width,\r\n                        height: data.props.pageProps.shareMeta.image.height\r\n                    }\r\n                },\r\n                country: BASE[\"$region\"],\r\n                streamURL: data.props.pageProps.videoData.itemInfos.video.urls[0] || null,\r\n                streams: data.props.pageProps.videoData.itemInfos.video.urls,\r\n                videoDetails: data.props.pageProps.videoData.itemInfos.video.videoMeta,\r\n                duration: data.props.pageProps.videoData.itemInfos.video.videoMeta.duration * 1000,\r\n                covers: data.props.pageProps.videoData.itemInfos.covers,\r\n                comments: data.props.pageProps.videoData.itemInfos.commentCount,\r\n                views: data.props.pageProps.videoData.itemInfos.playCount,\r\n                createTime: data.props.pageProps.videoData.itemInfos.createTime,\r\n                digg: data.props.pageProps.videoData.itemInfos.diggCount,\r\n                shares: data.props.pageProps.videoData.itemInfos.shareCount,\r\n                author: {\r\n                    verified: author.verified,\r\n                    secUid: author.secUid,\r\n                    username: author.uniqueId,\r\n                    id: author.userId,\r\n                    displayName: author.nickName,\r\n                    covers: author.covers,\r\n                    profile: `https://${BASE[\"$host\"]}/@${author.uniqueId}`,\r\n                    followers: authorStats.followerCount,\r\n                    hearts: authorStats.heartCount\r\n                },\r\n                challenge: {\r\n                    id: data.props.pageProps.videoData.challengeInfoList.challengeId || null,\r\n                    name: data.props.pageProps.videoData.challengeInfoList.challengeName || null\r\n                },\r\n                music: {\r\n                    id: music.musicId,\r\n                    name: music.musicName,\r\n                    author: music.authorName,\r\n                    covers: music.covers\r\n                },\r\n                keywords: data.props.pageProps.metaParams.keywords.split(\",\").map(m => m.trim())\r\n            };\r\n\r\n            return obj;\r\n\r\n        } catch(e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    static parseUserData(raw) {\r\n        if (!raw) return null;\r\n        try {\r\n            const data = JSON.parse(raw);\r\n            const BASE = data.props.pageProps;\r\n\r\n            const obj = {\r\n                id: BASE.userInfo.user.id,\r\n                username: BASE.uniqueId,\r\n                displayName: BASE.userInfo.user.nickname,\r\n                title: BASE.shareMeta.title,\r\n                description: BASE.shareMeta.desc,\r\n                profile: BASE.metaParams.canonicalHref,\r\n                avatars: {\r\n                    thumbnail: BASE.userInfo.user.avatarThumb,\r\n                    medium: BASE.userInfo.user.avatarMedium\r\n                },\r\n                signature: BASE.userInfo.user.signature,\r\n                verified: BASE.userInfo.user.verified,\r\n                private: BASE.userInfo.user.secret,\r\n                secUid: BASE.userInfo.user.secUid,\r\n                following: BASE.userInfo.stats.followingCount,\r\n                followers: BASE.userInfo.stats.followerCount,\r\n                hearts: BASE.userInfo.stats.heartCount,\r\n                videos: BASE.userInfo.stats.videoCount,\r\n                digg: BASE.userInfo.stats.diggCount,\r\n            };\r\n\r\n            return obj;\r\n\r\n        } catch (e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Parses embed\r\n     * @param {string} url Embed url to parse\r\n     */\r\n    static async parseEmbed(url) {\r\n        try {\r\n            let data = await fetch(url);\r\n            let res = await data.json();\r\n\r\n            let obj = {\r\n                version: res.version,\r\n                type: res.type,\r\n                title: res.title,\r\n                author: {\r\n                    username: res.author_name,\r\n                    profile: res.author_url\r\n                },\r\n                scale: {\r\n                    width: res.width,\r\n                    height: res.height\r\n                },\r\n                html: res.html,\r\n                thumbnail: {\r\n                    url: res.thumbnail_url,\r\n                    height: res.thumbnail_height,\r\n                    width: res.thumbnail_width\r\n                },\r\n                provider: {\r\n                    name: res.provider_name,\r\n                    url: res.provider_url\r\n                }\r\n            };\r\n\r\n            return obj;\r\n        } catch(e) {\r\n            return null;\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Validates TikTok URL\r\n     * @param {string} url url to validate\r\n     */\r\n    static validate(url) {\r\n        if (!url || typeof url !== \"string\") return false;\r\n        return REGEX.test(url);\r\n    }\r\n\r\n}\r\n\r\nmodule.exports = Util;"]},"metadata":{},"sourceType":"script"}