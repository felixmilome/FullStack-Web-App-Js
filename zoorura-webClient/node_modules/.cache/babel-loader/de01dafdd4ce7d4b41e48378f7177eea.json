{"ast":null,"code":"const Util = require(\"./Structures/Util.js\");\n\nconst https = require(\"https\");\n/**\r\n * Validates tiktok url\r\n * @param {string} url Url to validate\r\n */\n\n\nfunction validateURL(url) {\n  return Util.validate(url);\n}\n/**\r\n * Parses TikTok video info\r\n * @param {string} url TikTok video url\r\n */\n\n\nasync function getInfo(url) {\n  if (!validateURL(url)) throw new Error(\"Invalid url\");\n  const html = await Util.html(url);\n  if (!html) return null;\n  const $ = Util.getDocument(html);\n  const rawJSON = $(\"#__NEXT_DATA__\")[0].children[0].data;\n  return Util.parseVideoData(rawJSON);\n}\n/**\r\n * Parses TikTok user data\r\n * @param {string} username Username of a TikToker\r\n */\n\n\nasync function getUser(username) {\n  const html = await Util.html(`https://www.tiktok.com/@${username}`);\n  if (!html) return null;\n  const $ = Util.getDocument(html);\n  const rawJSON = $(\"#__NEXT_DATA__\")[0].children[0].data;\n  return Util.parseUserData(rawJSON);\n}\n/**\r\n * Fetches embed\r\n * @param {string} url Embed url to fetch\r\n */\n\n\nasync function getEmbed(url) {\n  if (!url) throw new Error(\"Invalid url\");\n  return await Util.parseEmbed(url);\n}\n/**\r\n * Downloads tiktok video\r\n * @param {string} url TikTok video url\r\n */\n\n\nfunction download(url) {\n  return new Promise(async (resolve, reject) => {\n    try {\n      const data = await getInfo(url);\n      if (!data || !data.streamURL) return reject(new Error(\"Couldn't resolve stream.\"));\n      https.get(data.streamURL, res => resolve(res));\n    } catch (e) {\n      reject(\"Couldn't resolve stream.\");\n    }\n  });\n}\n\nmodule.exports = {\n  download,\n  validateURL,\n  getInfo,\n  getUser,\n  getEmbed\n};","map":{"version":3,"sources":["/Users/Zoorura/Documents/Projects/Zoorura/zoorura-web/node_modules/tiktok-search/src/TikTok.js"],"names":["Util","require","https","validateURL","url","validate","getInfo","Error","html","$","getDocument","rawJSON","children","data","parseVideoData","getUser","username","parseUserData","getEmbed","parseEmbed","download","Promise","resolve","reject","streamURL","get","res","e","module","exports"],"mappings":"AAAA,MAAMA,IAAI,GAAGC,OAAO,CAAC,sBAAD,CAApB;;AACA,MAAMC,KAAK,GAAGD,OAAO,CAAC,OAAD,CAArB;AAEA;AACA;AACA;AACA;;;AACA,SAASE,WAAT,CAAqBC,GAArB,EAA0B;AACtB,SAAOJ,IAAI,CAACK,QAAL,CAAcD,GAAd,CAAP;AACH;AAED;AACA;AACA;AACA;;;AACA,eAAeE,OAAf,CAAuBF,GAAvB,EAA4B;AACxB,MAAI,CAACD,WAAW,CAACC,GAAD,CAAhB,EAAuB,MAAM,IAAIG,KAAJ,CAAU,aAAV,CAAN;AACvB,QAAMC,IAAI,GAAG,MAAMR,IAAI,CAACQ,IAAL,CAAUJ,GAAV,CAAnB;AACA,MAAI,CAACI,IAAL,EAAW,OAAO,IAAP;AACX,QAAMC,CAAC,GAAGT,IAAI,CAACU,WAAL,CAAiBF,IAAjB,CAAV;AACA,QAAMG,OAAO,GAAGF,CAAC,CAAC,gBAAD,CAAD,CAAoB,CAApB,EAAuBG,QAAvB,CAAgC,CAAhC,EAAmCC,IAAnD;AACA,SAAOb,IAAI,CAACc,cAAL,CAAoBH,OAApB,CAAP;AACH;AAED;AACA;AACA;AACA;;;AACA,eAAeI,OAAf,CAAuBC,QAAvB,EAAiC;AAC7B,QAAMR,IAAI,GAAG,MAAMR,IAAI,CAACQ,IAAL,CAAW,2BAA0BQ,QAAS,EAA9C,CAAnB;AACA,MAAI,CAACR,IAAL,EAAW,OAAO,IAAP;AACX,QAAMC,CAAC,GAAGT,IAAI,CAACU,WAAL,CAAiBF,IAAjB,CAAV;AACA,QAAMG,OAAO,GAAGF,CAAC,CAAC,gBAAD,CAAD,CAAoB,CAApB,EAAuBG,QAAvB,CAAgC,CAAhC,EAAmCC,IAAnD;AACA,SAAOb,IAAI,CAACiB,aAAL,CAAmBN,OAAnB,CAAP;AACH;AAED;AACA;AACA;AACA;;;AACA,eAAeO,QAAf,CAAwBd,GAAxB,EAA6B;AACzB,MAAI,CAACA,GAAL,EAAU,MAAM,IAAIG,KAAJ,CAAU,aAAV,CAAN;AACV,SAAO,MAAMP,IAAI,CAACmB,UAAL,CAAgBf,GAAhB,CAAb;AACH;AAED;AACA;AACA;AACA;;;AACA,SAASgB,QAAT,CAAkBhB,GAAlB,EAAuB;AACnB,SAAO,IAAIiB,OAAJ,CAAY,OAAOC,OAAP,EAAgBC,MAAhB,KAA2B;AAC1C,QAAI;AACA,YAAMV,IAAI,GAAG,MAAMP,OAAO,CAACF,GAAD,CAA1B;AACA,UAAI,CAACS,IAAD,IAAS,CAACA,IAAI,CAACW,SAAnB,EAA8B,OAAOD,MAAM,CAAC,IAAIhB,KAAJ,CAAU,0BAAV,CAAD,CAAb;AAC9BL,MAAAA,KAAK,CAACuB,GAAN,CAAUZ,IAAI,CAACW,SAAf,EAA0BE,GAAG,IAAIJ,OAAO,CAACI,GAAD,CAAxC;AACH,KAJD,CAIE,OAAMC,CAAN,EAAS;AACPJ,MAAAA,MAAM,CAAC,0BAAD,CAAN;AACH;AACJ,GARM,CAAP;AAUH;;AAEDK,MAAM,CAACC,OAAP,GAAiB;AACbT,EAAAA,QADa;AAEbjB,EAAAA,WAFa;AAGbG,EAAAA,OAHa;AAIbS,EAAAA,OAJa;AAKbG,EAAAA;AALa,CAAjB","sourcesContent":["const Util = require(\"./Structures/Util.js\");\r\nconst https = require(\"https\");\r\n\r\n/**\r\n * Validates tiktok url\r\n * @param {string} url Url to validate\r\n */\r\nfunction validateURL(url) {\r\n    return Util.validate(url);\r\n}\r\n\r\n/**\r\n * Parses TikTok video info\r\n * @param {string} url TikTok video url\r\n */\r\nasync function getInfo(url) {\r\n    if (!validateURL(url)) throw new Error(\"Invalid url\");\r\n    const html = await Util.html(url);\r\n    if (!html) return null;\r\n    const $ = Util.getDocument(html);\r\n    const rawJSON = $(\"#__NEXT_DATA__\")[0].children[0].data;\r\n    return Util.parseVideoData(rawJSON);\r\n}\r\n\r\n/**\r\n * Parses TikTok user data\r\n * @param {string} username Username of a TikToker\r\n */\r\nasync function getUser(username) {\r\n    const html = await Util.html(`https://www.tiktok.com/@${username}`);\r\n    if (!html) return null;\r\n    const $ = Util.getDocument(html);\r\n    const rawJSON = $(\"#__NEXT_DATA__\")[0].children[0].data;\r\n    return Util.parseUserData(rawJSON);\r\n}\r\n\r\n/**\r\n * Fetches embed\r\n * @param {string} url Embed url to fetch\r\n */\r\nasync function getEmbed(url) {\r\n    if (!url) throw new Error(\"Invalid url\");\r\n    return await Util.parseEmbed(url);\r\n}\r\n\r\n/**\r\n * Downloads tiktok video\r\n * @param {string} url TikTok video url\r\n */\r\nfunction download(url) {\r\n    return new Promise(async (resolve, reject) => {\r\n        try {\r\n            const data = await getInfo(url);\r\n            if (!data || !data.streamURL) return reject(new Error(\"Couldn't resolve stream.\"));\r\n            https.get(data.streamURL, res => resolve(res));\r\n        } catch(e) {\r\n            reject(\"Couldn't resolve stream.\");\r\n        }\r\n    });\r\n\r\n}\r\n\r\nmodule.exports = {\r\n    download,\r\n    validateURL,\r\n    getInfo,\r\n    getUser,\r\n    getEmbed\r\n};"]},"metadata":{},"sourceType":"script"}