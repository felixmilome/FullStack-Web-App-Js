{"ast":null,"code":"var _jsxFileName = \"/Users/Zoorura/Documents/Projects/Zoorura/zoorura-webClient/src/components/Body/PostFrameReviews.jsx\",\n    _s = $RefreshSig$();\n\nimport { useSelector, useDispatch } from 'react-redux';\nimport { useEffect, useState } from 'react';\nimport { getReviewsAction } from '../Midwares/rdx/actions/reviewsAction';\nimport moment from 'moment';\nimport { GiMoneyStack, GiTakeMyMoney } from \"react-icons/gi\";\nimport { BiCommentEdit } from \"react-icons/bi\";\nimport { MdSend, MdOutlineCancel } from \"react-icons/md\";\nimport { BeatLoader } from \"react-spinners\";\nimport { patchReviewsAction } from \"../Midwares/rdx/actions/reviewsAction.js\";\nimport { PostFrameRevRow } from \"./PostFrameRevRow.jsx\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const PostFrameReviews = ({\n  diary,\n  diaryId,\n  diaryCreator,\n  userId\n}) => {\n  _s();\n\n  const reviewersAll = useSelector(state => state.reviewsReducer);\n  const dispatch = useDispatch();\n  const availableReviewers = reviewersAll.filter(reviewer => reviewer.reviewedPostId === diaryId && reviewer.reply === false);\n  const availableRepliers = reviewersAll.filter(reviewer => reviewer.reviewedPostId === diaryId && reviewer.reply === true);\n  useEffect(() => {\n    if (!availableReviewers.length) {\n      dispatch(getReviewsAction(diaryId));\n    }\n  }, [dispatch]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fixed pt-32 top-0 bg-gray-200 left-0 w-full z-40 h-screen overflow-scroll\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"text-center w-full\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"font-normal\",\n        children: \"Reviews of post: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        className: \"font-bold\",\n        children: [\" \", diary.title, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), availableReviewers.length > 0 && availableReviewers.map(reviewer => /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ml-5 bg-gray-100  rounded-md \",\n      children: /*#__PURE__*/_jsxDEV(PostFrameRevRow, {\n        diaryId: diaryId,\n        diaryCreator: diaryCreator,\n        userId: userId,\n        reviewer: reviewer\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 22\n      }, this)\n    }, reviewer._id, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 17\n    }, this))]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n};\n\n_s(PostFrameReviews, \"jibgKA41hTLT8QBXXrAWz2pys2Y=\", false, function () {\n  return [useSelector, useDispatch];\n});\n\n_c = PostFrameReviews;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostFrameReviews\");","map":{"version":3,"sources":["/Users/Zoorura/Documents/Projects/Zoorura/zoorura-webClient/src/components/Body/PostFrameReviews.jsx"],"names":["useSelector","useDispatch","useEffect","useState","getReviewsAction","moment","GiMoneyStack","GiTakeMyMoney","BiCommentEdit","MdSend","MdOutlineCancel","BeatLoader","patchReviewsAction","PostFrameRevRow","PostFrameReviews","diary","diaryId","diaryCreator","userId","reviewersAll","state","reviewsReducer","dispatch","availableReviewers","filter","reviewer","reviewedPostId","reply","availableRepliers","length","title","map","_id"],"mappings":";;;AAAA,SAAQA,WAAR,EAAqBC,WAArB,QAAuC,aAAvC;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAmC,OAAnC;AACA,SAASC,gBAAT,QAAiC,uCAAjC;AACA,OAAOC,MAAP,MAAmB,QAAnB;AACA,SAAOC,YAAP,EAAqBC,aAArB,QAAyC,gBAAzC;AACA,SAASC,aAAT,QAA8B,gBAA9B;AACA,SAASC,MAAT,EAAgBC,eAAhB,QAAsC,gBAAtC;AACA,SAAQC,UAAR,QAAyB,gBAAzB;AACA,SAAQC,kBAAR,QAAiC,0CAAjC;AACA,SAAOC,eAAP,QAA6B,uBAA7B;;AAGA,OAAO,MAAMC,gBAAgB,GAAG,CAAC;AAACC,EAAAA,KAAD;AAAQC,EAAAA,OAAR;AAAiBC,EAAAA,YAAjB;AAA+BC,EAAAA;AAA/B,CAAD,KAA4C;AAAA;;AAIxE,QAAMC,YAAY,GAAGnB,WAAW,CAAEoB,KAAD,IAAWA,KAAK,CAACC,cAAlB,CAAhC;AAEA,QAAMC,QAAQ,GAAGrB,WAAW,EAA5B;AAEA,QAAMsB,kBAAkB,GAAGJ,YAAY,CAACK,MAAb,CAAoBC,QAAQ,IAAIA,QAAQ,CAACC,cAAT,KAA4BV,OAA5B,IAAuCS,QAAQ,CAACE,KAAT,KAAmB,KAA1F,CAA3B;AACA,QAAMC,iBAAiB,GAAGT,YAAY,CAACK,MAAb,CAAoBC,QAAQ,IAAIA,QAAQ,CAACC,cAAT,KAA4BV,OAA5B,IAAuCS,QAAQ,CAACE,KAAT,KAAmB,IAA1F,CAA1B;AAGAzB,EAAAA,SAAS,CAAC,MAAM;AAEZ,QAAG,CAACqB,kBAAkB,CAACM,MAAvB,EAA8B;AAE1BP,MAAAA,QAAQ,CAAClB,gBAAgB,CAACY,OAAD,CAAjB,CAAR;AACH;AAEJ,GAPQ,EAON,CAACM,QAAD,CAPM,CAAT;AAUA,sBAGI;AAAK,IAAA,SAAS,EAAE,2EAAhB;AAAA,4BACI;AAAK,MAAA,SAAS,EAAE,oBAAhB;AAAA,8BACI;AAAG,QAAA,SAAS,EAAC,aAAb;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAG,QAAA,SAAS,EAAC,WAAb;AAAA,wBAA2BP,KAAK,CAACe,KAAjC;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAMKP,kBAAkB,CAACM,MAAnB,GAA4B,CAA5B,IAAkCN,kBAAkB,CAACQ,GAAnB,CAAwBN,QAAD,iBAEtD;AAAyB,MAAA,SAAS,EAAC,+BAAnC;AAAA,6BAEK,QAAC,eAAD;AAAiB,QAAA,OAAO,EAAET,OAA1B;AAAmC,QAAA,YAAY,EAAEC,YAAjD;AAA+D,QAAA,MAAM,EAAGC,MAAxE;AAAgF,QAAA,QAAQ,EAAGO;AAA3F;AAAA;AAAA;AAAA;AAAA;AAFL,OAAUA,QAAQ,CAACO,GAAnB;AAAA;AAAA;AAAA;AAAA,YAF+B,CANvC;AAAA;AAAA;AAAA;AAAA;AAAA,UAHJ;AAsBH,CA5CM;;GAAMlB,gB;UAIYd,W,EAEJC,W;;;KANRa,gB","sourcesContent":["import {useSelector, useDispatch} from 'react-redux';\nimport { useEffect, useState} from 'react';\nimport { getReviewsAction } from '../Midwares/rdx/actions/reviewsAction';\nimport moment from 'moment'; \nimport{GiMoneyStack, GiTakeMyMoney} from \"react-icons/gi\"; \nimport { BiCommentEdit } from \"react-icons/bi\";\nimport { MdSend,MdOutlineCancel} from \"react-icons/md\";\nimport {BeatLoader} from \"react-spinners\";\nimport {patchReviewsAction} from \"../Midwares/rdx/actions/reviewsAction.js\"\nimport{PostFrameRevRow} from \"./PostFrameRevRow.jsx\"\n\n\nexport const PostFrameReviews = ({diary, diaryId, diaryCreator, userId}) => {\n\n        \n\n    const reviewersAll = useSelector((state) => state.reviewsReducer);\n   \n    const dispatch = useDispatch(); \n\n    const availableReviewers = reviewersAll.filter(reviewer => reviewer.reviewedPostId === diaryId && reviewer.reply === false);\n    const availableRepliers = reviewersAll.filter(reviewer => reviewer.reviewedPostId === diaryId && reviewer.reply === true);\n    \n   \n    useEffect(() => {     \n       \n        if(!availableReviewers.length){\n            \n            dispatch(getReviewsAction(diaryId));    \n        }\n\n    }, [dispatch]); \n\n\n    return (\n      \n     \n        <div className= 'fixed pt-32 top-0 bg-gray-200 left-0 w-full z-40 h-screen overflow-scroll'>\n            <div className= 'text-center w-full'>\n                <p className='font-normal'>Reviews of post: </p>\n                <p className='font-bold'> {diary.title} </p>\n           </div>\n           \n            {availableReviewers.length > 0  && availableReviewers.map((reviewer) =>(\n              \n                <div key={reviewer._id}  className='ml-5 bg-gray-100  rounded-md '>\n            \n                     <PostFrameRevRow diaryId={diaryId} diaryCreator={diaryCreator} userId= {userId} reviewer= {reviewer}/>\n                   \n                 </div> \n            ))\n            \n        }   \n                       \n        </div>\n    )\n}"]},"metadata":{},"sourceType":"module"}