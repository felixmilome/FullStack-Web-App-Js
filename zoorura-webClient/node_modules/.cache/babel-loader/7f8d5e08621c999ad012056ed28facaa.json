{"ast":null,"code":"const ffmpeg = require('@ffmpeg-installer/ffmpeg');\n\nconst FFmpeg = require('fluent-ffmpeg');\n\nconst fs = require('fs');\n\nFFmpeg.setFfmpegPath(ffmpeg.path);\n\nconst {\n  input,\n  output\n} = require('./res/paths');\n\nconst path = require('path');\n\nconst queue = [];\nlet running = false;\n\nconst processVideo = async (input_video, call, missingVideos = []) => {\n  if (queue.length === 0 && input_video !== \"\") {\n    queue.push(input_video);\n  }\n\n  if (missingVideos.length > 1) {\n    const clone = [...missingVideos];\n    clone.shift();\n    clone.forEach((v, i) => {\n      queue.push(v);\n    });\n  }\n\n  if (!running && queue.length > 0) {\n    running = true;\n    const proc = await new FFmpeg({\n      source: path.resolve(input, queue[0])\n    }).videoCodec('libx264') //.noAudio()\n    .saveToFile(path.resolve(output, queue[0])).on('end', function () {\n      //console.log(\"OK\");\n      fs.unlinkSync(path.resolve(input, queue[0]));\n      running = false;\n\n      if (queue.shift() !== undefined && queue.length > 0) {\n        processVideo(queue[0], call);\n      }\n    });\n  } else {\n    queue.push(input_video);\n  }\n};\n\nmodule.exports = processVideo;","map":{"version":3,"sources":["/Users/Zoorura/Documents/Projects/Zoorura/zoorura-webClient/node_modules/video-compressor/src/video-compress.js"],"names":["ffmpeg","require","FFmpeg","fs","setFfmpegPath","path","input","output","queue","running","processVideo","input_video","call","missingVideos","length","push","clone","shift","forEach","v","i","proc","source","resolve","videoCodec","saveToFile","on","unlinkSync","undefined","module","exports"],"mappings":"AAAA,MAAMA,MAAM,GAAGC,OAAO,CAAC,0BAAD,CAAtB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,eAAD,CAAtB;;AACA,MAAME,EAAE,GAAGF,OAAO,CAAC,IAAD,CAAlB;;AACAC,MAAM,CAACE,aAAP,CAAqBJ,MAAM,CAACK,IAA5B;;AAEA,MAAM;AAACC,EAAAA,KAAD;AAAQC,EAAAA;AAAR,IAAkBN,OAAO,CAAC,aAAD,CAA/B;;AAEA,MAAMI,IAAI,GAAGJ,OAAO,CAAC,MAAD,CAApB;;AAEA,MAAMO,KAAK,GAAG,EAAd;AACA,IAAIC,OAAO,GAAG,KAAd;;AAEA,MAAMC,YAAY,GAAG,OAAOC,WAAP,EAAoBC,IAApB,EAA0BC,aAAa,GAAG,EAA1C,KAAiD;AAClE,MAAIL,KAAK,CAACM,MAAN,KAAiB,CAAjB,IAAsBH,WAAW,KAAK,EAA1C,EAA8C;AAC1CH,IAAAA,KAAK,CAACO,IAAN,CAAWJ,WAAX;AACH;;AAED,MAAIE,aAAa,CAACC,MAAd,GAAuB,CAA3B,EAA8B;AAC1B,UAAME,KAAK,GAAG,CAAC,GAAGH,aAAJ,CAAd;AACAG,IAAAA,KAAK,CAACC,KAAN;AAEAD,IAAAA,KAAK,CAACE,OAAN,CAAc,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACpBZ,MAAAA,KAAK,CAACO,IAAN,CAAWI,CAAX;AACH,KAFD;AAGH;;AAGD,MAAI,CAACV,OAAD,IAAYD,KAAK,CAACM,MAAN,GAAe,CAA/B,EAAkC;AAC9BL,IAAAA,OAAO,GAAG,IAAV;AAEA,UAAMY,IAAI,GAAG,MAAM,IAAInB,MAAJ,CAAW;AAACoB,MAAAA,MAAM,EAAEjB,IAAI,CAACkB,OAAL,CAAajB,KAAb,EAAoBE,KAAK,CAAC,CAAD,CAAzB;AAAT,KAAX,EACdgB,UADc,CACH,SADG,EAEf;AAFe,KAGdC,UAHc,CAGHpB,IAAI,CAACkB,OAAL,CAAahB,MAAb,EAAqBC,KAAK,CAAC,CAAD,CAA1B,CAHG,EAIdkB,EAJc,CAIX,KAJW,EAIJ,YAAY;AACnB;AACAvB,MAAAA,EAAE,CAACwB,UAAH,CAActB,IAAI,CAACkB,OAAL,CAAajB,KAAb,EAAoBE,KAAK,CAAC,CAAD,CAAzB,CAAd;AACAC,MAAAA,OAAO,GAAG,KAAV;;AAEA,UAAID,KAAK,CAACS,KAAN,OAAkBW,SAAlB,IAA+BpB,KAAK,CAACM,MAAN,GAAe,CAAlD,EAAqD;AACjDJ,QAAAA,YAAY,CAACF,KAAK,CAAC,CAAD,CAAN,EAAWI,IAAX,CAAZ;AACH;AACJ,KAZc,CAAnB;AAaH,GAhBD,MAgBO;AACHJ,IAAAA,KAAK,CAACO,IAAN,CAAWJ,WAAX;AACH;AACJ,CAlCD;;AAoCAkB,MAAM,CAACC,OAAP,GAAiBpB,YAAjB","sourcesContent":["const ffmpeg = require('@ffmpeg-installer/ffmpeg');\r\nconst FFmpeg = require('fluent-ffmpeg');\r\nconst fs = require('fs');\r\nFFmpeg.setFfmpegPath(ffmpeg.path);\r\n\r\nconst {input, output} = require('./res/paths');\r\n\r\nconst path = require('path');\r\n\r\nconst queue = [];\r\nlet running = false;\r\n\r\nconst processVideo = async (input_video, call, missingVideos = []) => {\r\n    if (queue.length === 0 && input_video !== \"\") {\r\n        queue.push(input_video);\r\n    }\r\n\r\n    if (missingVideos.length > 1) {\r\n        const clone = [...missingVideos];\r\n        clone.shift();\r\n\r\n        clone.forEach((v, i) => {\r\n            queue.push(v);\r\n        });\r\n    }\r\n\r\n\r\n    if (!running && queue.length > 0) {\r\n        running = true;\r\n\r\n        const proc = await new FFmpeg({source: path.resolve(input, queue[0])})\r\n            .videoCodec('libx264')\r\n            //.noAudio()\r\n            .saveToFile(path.resolve(output, queue[0]))\r\n            .on('end', function () {\r\n                //console.log(\"OK\");\r\n                fs.unlinkSync(path.resolve(input, queue[0]))\r\n                running = false;\r\n\r\n                if (queue.shift() !== undefined && queue.length > 0) {\r\n                    processVideo(queue[0], call);\r\n                }\r\n            });\r\n    } else {\r\n        queue.push(input_video);\r\n    }\r\n};\r\n\r\nmodule.exports = processVideo;"]},"metadata":{},"sourceType":"script"}