{"ast":null,"code":"'use strict';\n\nvar os = require('os');\n\nvar path = require('path');\n\nvar verifyFile = require('./lib/verify-file');\n\nvar platform = os.platform() + '-' + os.arch();\nvar packageName = '@ffmpeg-installer/' + platform;\n\nif (!require('./package.json').optionalDependencies[packageName]) {\n  throw 'Unsupported platform/architecture: ' + platform;\n}\n\nvar binary = os.platform() === 'win32' ? 'ffmpeg.exe' : 'ffmpeg';\nvar topLevelPath = path.resolve(__dirname.substr(0, __dirname.indexOf('node_modules')), 'node_modules', '@ffmpeg-installer', platform);\nvar npm3Path = path.resolve(__dirname, '..', platform);\nvar npm2Path = path.resolve(__dirname, 'node_modules', '@ffmpeg-installer', platform);\nvar topLevelBinary = path.join(topLevelPath, binary);\nvar npm3Binary = path.join(npm3Path, binary);\nvar npm2Binary = path.join(npm2Path, binary);\nvar topLevelPackage = path.join(topLevelPath, 'package.json');\nvar npm3Package = path.join(npm3Path, 'package.json');\nvar npm2Package = path.join(npm2Path, 'package.json');\nvar ffmpegPath, packageJson;\n\nif (verifyFile(npm3Binary)) {\n  ffmpegPath = npm3Binary;\n  packageJson = require(npm3Package);\n} else if (verifyFile(npm2Binary)) {\n  ffmpegPath = npm2Binary;\n  packageJson = require(npm2Package);\n} else if (verifyFile(topLevelBinary)) {\n  ffmpegPath = topLevelBinary;\n  packageJson = require(topLevelPackage);\n} else {\n  throw 'Could not find ffmpeg executable, tried \"' + npm3Binary + '\", \"' + npm2Binary + '\" and \"' + topLevelBinary + '\"';\n}\n\nvar version = packageJson.ffmpeg || packageJson.version;\nvar url = packageJson.homepage;\n/**\n * @type {{\n *  path: string;\n *  version: string;\n *  url: string;\n * }}\n */\n\nmodule.exports = {\n  path: ffmpegPath,\n  version: version,\n  url: url\n};","map":{"version":3,"sources":["/Users/Zoorura/Documents/Projects/Zoorura/zoorura-webClient/node_modules/@ffmpeg-installer/ffmpeg/index.js"],"names":["os","require","path","verifyFile","platform","arch","packageName","optionalDependencies","binary","topLevelPath","resolve","__dirname","substr","indexOf","npm3Path","npm2Path","topLevelBinary","join","npm3Binary","npm2Binary","topLevelPackage","npm3Package","npm2Package","ffmpegPath","packageJson","version","ffmpeg","url","homepage","module","exports"],"mappings":"AAAA;;AAEA,IAAIA,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AAEA,IAAIE,UAAU,GAAGF,OAAO,CAAC,mBAAD,CAAxB;;AAEA,IAAIG,QAAQ,GAAGJ,EAAE,CAACI,QAAH,KAAgB,GAAhB,GAAsBJ,EAAE,CAACK,IAAH,EAArC;AAEA,IAAIC,WAAW,GAAG,uBAAuBF,QAAzC;;AAEA,IAAI,CAACH,OAAO,CAAC,gBAAD,CAAP,CAA0BM,oBAA1B,CAA+CD,WAA/C,CAAL,EAAkE;AAC9D,QAAM,wCAAwCF,QAA9C;AACH;;AAED,IAAII,MAAM,GAAGR,EAAE,CAACI,QAAH,OAAkB,OAAlB,GAA4B,YAA5B,GAA2C,QAAxD;AAEA,IAAIK,YAAY,GAAGP,IAAI,CAACQ,OAAL,CAAaC,SAAS,CAACC,MAAV,CAAiB,CAAjB,EAAoBD,SAAS,CAACE,OAAV,CAAkB,cAAlB,CAApB,CAAb,EAAqE,cAArE,EAAqF,mBAArF,EAA0GT,QAA1G,CAAnB;AACA,IAAIU,QAAQ,GAAGZ,IAAI,CAACQ,OAAL,CAAaC,SAAb,EAAwB,IAAxB,EAA8BP,QAA9B,CAAf;AACA,IAAIW,QAAQ,GAAGb,IAAI,CAACQ,OAAL,CAAaC,SAAb,EAAwB,cAAxB,EAAwC,mBAAxC,EAA6DP,QAA7D,CAAf;AAEA,IAAIY,cAAc,GAAGd,IAAI,CAACe,IAAL,CAAUR,YAAV,EAAwBD,MAAxB,CAArB;AACA,IAAIU,UAAU,GAAGhB,IAAI,CAACe,IAAL,CAAUH,QAAV,EAAoBN,MAApB,CAAjB;AACA,IAAIW,UAAU,GAAGjB,IAAI,CAACe,IAAL,CAAUF,QAAV,EAAoBP,MAApB,CAAjB;AAEA,IAAIY,eAAe,GAAGlB,IAAI,CAACe,IAAL,CAAUR,YAAV,EAAwB,cAAxB,CAAtB;AACA,IAAIY,WAAW,GAAGnB,IAAI,CAACe,IAAL,CAAUH,QAAV,EAAoB,cAApB,CAAlB;AACA,IAAIQ,WAAW,GAAGpB,IAAI,CAACe,IAAL,CAAUF,QAAV,EAAoB,cAApB,CAAlB;AAEA,IAAIQ,UAAJ,EAAgBC,WAAhB;;AAEA,IAAIrB,UAAU,CAACe,UAAD,CAAd,EAA4B;AACxBK,EAAAA,UAAU,GAAGL,UAAb;AACAM,EAAAA,WAAW,GAAGvB,OAAO,CAACoB,WAAD,CAArB;AACH,CAHD,MAGO,IAAIlB,UAAU,CAACgB,UAAD,CAAd,EAA4B;AAC/BI,EAAAA,UAAU,GAAGJ,UAAb;AACAK,EAAAA,WAAW,GAAGvB,OAAO,CAACqB,WAAD,CAArB;AACH,CAHM,MAGA,IAAInB,UAAU,CAACa,cAAD,CAAd,EAAgC;AACnCO,EAAAA,UAAU,GAAGP,cAAb;AACAQ,EAAAA,WAAW,GAAGvB,OAAO,CAACmB,eAAD,CAArB;AACH,CAHM,MAGA;AACH,QAAM,8CAA8CF,UAA9C,GAA2D,MAA3D,GAAoEC,UAApE,GAAiF,SAAjF,GAA6FH,cAA7F,GAA8G,GAApH;AACH;;AAED,IAAIS,OAAO,GAAGD,WAAW,CAACE,MAAZ,IAAsBF,WAAW,CAACC,OAAhD;AACA,IAAIE,GAAG,GAAGH,WAAW,CAACI,QAAtB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAC,MAAM,CAACC,OAAP,GAAiB;AACb5B,EAAAA,IAAI,EAAEqB,UADO;AAEbE,EAAAA,OAAO,EAAEA,OAFI;AAGbE,EAAAA,GAAG,EAAEA;AAHQ,CAAjB","sourcesContent":["'use strict';\n\nvar os = require('os');\nvar path = require('path');\n\nvar verifyFile = require('./lib/verify-file');\n\nvar platform = os.platform() + '-' + os.arch();\n\nvar packageName = '@ffmpeg-installer/' + platform;\n\nif (!require('./package.json').optionalDependencies[packageName]) {\n    throw 'Unsupported platform/architecture: ' + platform;\n}\n\nvar binary = os.platform() === 'win32' ? 'ffmpeg.exe' : 'ffmpeg';\n\nvar topLevelPath = path.resolve(__dirname.substr(0, __dirname.indexOf('node_modules')), 'node_modules', '@ffmpeg-installer', platform);\nvar npm3Path = path.resolve(__dirname, '..', platform);\nvar npm2Path = path.resolve(__dirname, 'node_modules', '@ffmpeg-installer', platform);\n\nvar topLevelBinary = path.join(topLevelPath, binary);\nvar npm3Binary = path.join(npm3Path, binary);\nvar npm2Binary = path.join(npm2Path, binary);\n\nvar topLevelPackage = path.join(topLevelPath, 'package.json');\nvar npm3Package = path.join(npm3Path, 'package.json');\nvar npm2Package = path.join(npm2Path, 'package.json');\n\nvar ffmpegPath, packageJson;\n\nif (verifyFile(npm3Binary)) {\n    ffmpegPath = npm3Binary;\n    packageJson = require(npm3Package);\n} else if (verifyFile(npm2Binary)) {\n    ffmpegPath = npm2Binary;\n    packageJson = require(npm2Package);\n} else if (verifyFile(topLevelBinary)) {\n    ffmpegPath = topLevelBinary;\n    packageJson = require(topLevelPackage);\n} else {\n    throw 'Could not find ffmpeg executable, tried \"' + npm3Binary + '\", \"' + npm2Binary + '\" and \"' + topLevelBinary + '\"';\n}\n\nvar version = packageJson.ffmpeg || packageJson.version;\nvar url = packageJson.homepage;\n\n/**\n * @type {{\n *  path: string;\n *  version: string;\n *  url: string;\n * }}\n */\nmodule.exports = {\n    path: ffmpegPath,\n    version: version,\n    url: url\n};\n"]},"metadata":{},"sourceType":"script"}