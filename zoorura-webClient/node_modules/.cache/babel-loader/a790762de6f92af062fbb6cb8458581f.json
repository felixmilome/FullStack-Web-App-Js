{"ast":null,"code":"/*! get-video-id v3.4.3 | @license MIT Â© Michael Wuergler | https://github.com/radiovisual/get-video-id */\n\n/**\n * Strip away any remaining parameters following `?` or `/` or '&' for YouTube shortcode strings.\n *\n * @note this function is not meant to work with url strings containing a protocol like https://\n * @param {String} shortcodeString - the parameter string\n * @returns {String}\n */\nfunction stripParameters(shortcodeString) {\n  // Split parameters or split folder separator\n  if (shortcodeString.includes('?')) {\n    return shortcodeString.split('?')[0];\n  }\n\n  if (shortcodeString.includes('/')) {\n    return shortcodeString.split('/')[0];\n  }\n\n  if (shortcodeString.includes('&')) {\n    return shortcodeString.split('&')[0];\n  }\n\n  return shortcodeString;\n}\n/**\n * Get the Youtube Video id.\n * @param {string} youtubeStr - the url from which you want to extract the id\n * @returns {string|undefined}\n */\n\n\nfunction youtube(youtubeString) {\n  var string_ = youtubeString; // Remove time hash at the end of the string\n\n  string_ = string_.replace(/#t=.*$/, ''); // Strip the leading protocol\n\n  string_ = string_.replace(/^https?:\\/\\//, ''); // Shortcode\n\n  var shortcode = /youtube:\\/\\/|youtu\\.be\\/|y2u\\.be\\//g;\n\n  if (shortcode.test(string_)) {\n    var shortcodeid = string_.split(shortcode)[1];\n    return stripParameters(shortcodeid);\n  } // /v/ or /vi/\n\n\n  var inlinev = /\\/v\\/|\\/vi\\//g;\n\n  if (inlinev.test(string_)) {\n    var inlineid = string_.split(inlinev)[1];\n    return stripParameters(inlineid);\n  } // V= or vi=\n\n\n  var parameterv = /v=|vi=/g;\n\n  if (parameterv.test(string_)) {\n    var array = string_.split(parameterv);\n    return stripParameters(array[1].split('&')[0]);\n  } // Format an_webp\n\n\n  var parameterwebp = /\\/an_webp\\//g;\n\n  if (parameterwebp.test(string_)) {\n    var webp = string_.split(parameterwebp)[1];\n    return stripParameters(webp);\n  } // /e/\n\n\n  var eformat = /\\/e\\//g;\n\n  if (eformat.test(string_)) {\n    var estring = string_.split(eformat)[1];\n    return stripParameters(estring);\n  } // Embed\n\n\n  var embedreg = /\\/embed\\//g;\n\n  if (embedreg.test(string_)) {\n    var embedid = string_.split(embedreg)[1];\n    return stripParameters(embedid);\n  } // ignore /user/username pattern\n\n\n  var usernamereg = /\\/user\\/([a-zA-Z\\d]*)$/g;\n\n  if (usernamereg.test(string_)) {\n    return undefined;\n  } // User\n\n\n  var userreg = /\\/user\\/(?!.*videos)/g;\n\n  if (userreg.test(string_)) {\n    var elements = string_.split('/');\n    return stripParameters(elements.pop());\n  } // Attribution_link\n\n\n  var attrreg = /\\/attribution_link\\?.*v%3D([^%&]*)(%26|&|$)/;\n\n  if (attrreg.test(string_)) {\n    return stripParameters(string_.match(attrreg)[1]);\n  }\n\n  return undefined;\n}\n\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArrayLimit(arr, i) {\n  var _i = arr == null ? null : typeof Symbol !== \"undefined\" && arr[Symbol.iterator] || arr[\"@@iterator\"];\n\n  if (_i == null) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n\n  var _s, _e;\n\n  try {\n    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n\n  return arr2;\n}\n\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n/**\n * Get the vimeo id.\n *\n * @param {String} vimeoString the url from which you want to extract the id\n * @returns {String|undefined}\n */\n\n\nfunction vimeo(vimeoString) {\n  var string_ = vimeoString;\n\n  if (string_.includes('#')) {\n    var _string_$split = string_.split('#');\n\n    var _string_$split2 = _slicedToArray(_string_$split, 1);\n\n    string_ = _string_$split2[0];\n  }\n\n  if (string_.includes('?') && !string_.includes('clip_id=')) {\n    var _string_$split3 = string_.split('?');\n\n    var _string_$split4 = _slicedToArray(_string_$split3, 1);\n\n    string_ = _string_$split4[0];\n  }\n\n  var id;\n  var array;\n  var event = /https?:\\/\\/vimeo\\.com\\/event\\/(\\d+)$/;\n  var eventMatches = event.exec(string_);\n\n  if (eventMatches && eventMatches[1]) {\n    return eventMatches[1];\n  }\n\n  var primary = /https?:\\/\\/vimeo\\.com\\/(\\d+)/;\n  var matches = primary.exec(string_);\n\n  if (matches && matches[1]) {\n    return matches[1];\n  }\n\n  var vimeoPipe = ['https?://player.vimeo.com/video/[0-9]+$', 'https?://vimeo.com/channels', 'groups', 'album'].join('|');\n  var vimeoRegex = new RegExp(vimeoPipe, 'gim');\n\n  if (vimeoRegex.test(string_)) {\n    array = string_.split('/');\n\n    if (array && array.length > 0) {\n      id = array.pop();\n    }\n  } else if (/clip_id=/gim.test(string_)) {\n    array = string_.split('clip_id=');\n\n    if (array && array.length > 0) {\n      var _array$1$split = array[1].split('&');\n\n      var _array$1$split2 = _slicedToArray(_array$1$split, 1);\n\n      id = _array$1$split2[0];\n    }\n  }\n\n  return id;\n}\n/**\n * Get the vine id.\n * @param {string} string_ - the url from which you want to extract the id\n * @returns {string|undefined}\n */\n\n\nfunction vine(string_) {\n  var regex = /https:\\/\\/vine\\.co\\/v\\/([a-zA-Z\\d]*)\\/?/;\n  var matches = regex.exec(string_);\n\n  if (matches && matches.length > 1) {\n    return matches[1];\n  }\n\n  return undefined;\n}\n/**\n * Get the VideoPress id.\n * @param {string} urlString - the url from which you want to extract the id\n * @returns {string|undefined}\n */\n\n\nfunction videopress(urlString) {\n  var idRegex;\n\n  if (urlString.includes('embed')) {\n    idRegex = /embed\\/(\\w{8})/;\n    return urlString.match(idRegex)[1];\n  }\n\n  idRegex = /\\/v\\/(\\w{8})/;\n  var matches = urlString.match(idRegex);\n\n  if (matches && matches.length > 0) {\n    return matches[1];\n  }\n\n  return undefined;\n}\n/**\n * Get the Microsoft Stream id.\n * @param {string} urlString - the url from which you want to extract the id\n * @returns {string|undefined}\n */\n\n\nfunction microsoftStream(urlString) {\n  var regex = urlString.includes('embed') ? /https:\\/\\/web\\.microsoftstream\\.com\\/embed\\/video\\/([a-zA-Z\\d-]*)\\/?/ : /https:\\/\\/web\\.microsoftstream\\.com\\/video\\/([a-zA-Z\\d-]*)\\/?/;\n  var matches = regex.exec(urlString);\n\n  if (matches && matches.length > 1) {\n    return matches[1];\n  }\n\n  return undefined;\n}\n/**\n * Get the tiktok id.\n * @param {string} urlString - the url from which you want to extract the id\n * @returns {string|undefined}\n */\n\n\nfunction tiktok(urlString) {\n  // Parse basic url and embeds\n  var basicReg = /tiktok\\.com(.*)\\/video\\/(\\d+)/gm;\n  var basicParsed = basicReg.exec(urlString);\n\n  if (basicParsed && basicParsed.length > 2) {\n    return basicParsed[2];\n  }\n\n  return undefined;\n}\n/**\n * Get the dailymotion id.\n * @param {string} urlString - the url from which you want to extract the id\n * @returns {string|undefined}\n */\n\n\nfunction dailymotion(urlString) {\n  // Parse basic url and embeds\n  var basicReg = /dailymotion\\.com(.*)(video)\\/([a-zA-Z\\d]+)/gm;\n  var basicParsed = basicReg.exec(urlString);\n\n  if (basicParsed) {\n    return basicParsed[3];\n  } // Parse shortlink\n\n\n  var shortRegex = /dai\\.ly\\/([a-zA-Z\\d]+)/gm;\n  var shortParsed = shortRegex.exec(urlString);\n\n  if (shortParsed && shortParsed.length > 1) {\n    return shortParsed[1];\n  } // Dynamic link\n\n\n  var dynamicRegex = /dailymotion\\.com(.*)video=([a-zA-Z\\d]+)/gm;\n  var dynamicParsed = dynamicRegex.exec(urlString);\n\n  if (dynamicParsed && dynamicParsed.length > 2) {\n    return dynamicParsed[2];\n  }\n\n  return undefined;\n}\n/**\n * Get the value assigned to a \"src\" attribute in a string, or undefined.\n * @param {String} input\n * @returns {String|undefined}\n */\n\n\nfunction getSrc(input) {\n  if (typeof input !== 'string') {\n    throw new TypeError('getSrc expected a string');\n  }\n\n  var srcRegEx = /src=\"(.*?)\"/gm;\n  var matches = srcRegEx.exec(input);\n\n  if (matches && matches.length >= 2) {\n    return matches[1];\n  }\n\n  return undefined;\n}\n/**\n * Get the id and service from a video url.\n * @param {String} urlString - the url from which you want to extract the id\n * @returns {Object}\n */\n\n\nfunction getVideoId(urlString) {\n  if (typeof urlString !== 'string') {\n    throw new TypeError('get-video-id expects a string');\n  }\n\n  var string_ = urlString;\n\n  if (/<iframe/gi.test(string_)) {\n    string_ = getSrc(string_);\n  } // Remove surrounding whitespaces or linefeeds\n\n\n  string_ = string_.trim(); // Remove the '-nocookie' flag from youtube urls\n\n  string_ = string_.replace('-nocookie', ''); // Remove any leading `www.`\n\n  string_ = string_.replace('/www.', '/');\n  var metadata = {\n    id: null,\n    service: null\n  }; // Try to handle google redirection uri\n\n  if (/\\/\\/google/.test(string_)) {\n    // Find the redirection uri\n    var matches = string_.match(/url=([^&]+)&/); // Decode the found uri and replace current url string - continue with final link\n\n    if (matches) {\n      // JavaScript can get encoded URI\n      string_ = decodeURIComponent(matches[1]);\n    }\n  }\n\n  if (/youtube|youtu\\.be|y2u\\.be|i.ytimg\\./.test(string_)) {\n    metadata = {\n      id: youtube(string_),\n      service: 'youtube'\n    };\n  } else if (/vimeo/.test(string_)) {\n    metadata = {\n      id: vimeo(string_),\n      service: 'vimeo'\n    };\n  } else if (/vine/.test(string_)) {\n    metadata = {\n      id: vine(string_),\n      service: 'vine'\n    };\n  } else if (/videopress/.test(string_)) {\n    metadata = {\n      id: videopress(string_),\n      service: 'videopress'\n    };\n  } else if (/microsoftstream/.test(string_)) {\n    metadata = {\n      id: microsoftStream(string_),\n      service: 'microsoftstream'\n    };\n  } else if (/tiktok\\.com/.test(string_)) {\n    metadata = {\n      id: tiktok(string_),\n      service: 'tiktok'\n    };\n  } else if (/(dailymotion\\.com|dai\\.ly)/.test(string_)) {\n    metadata = {\n      id: dailymotion(string_),\n      service: 'dailymotion'\n    };\n  }\n\n  return metadata;\n}\n\nexport default getVideoId;","map":{"version":3,"sources":["../src/youtube.js","../src/vimeo.js","../src/vine.js","../src/videopress.js","../src/microsoftstream.js","../src/tiktok.js","../src/dailymotion.js","../src/utils/get-src.js","../src/index.js"],"names":["shortcodeString","string_","shortcode","shortcodeid","stripParameters","inlinev","inlineid","parameterv","array","parameterwebp","webp","eformat","estring","embedreg","embedid","usernamereg","userreg","elements","attrreg","event","eventMatches","primary","matches","vimeoPipe","vimeoRegex","id","regex","urlString","idRegex","basicReg","basicParsed","shortRegex","shortParsed","dynamicRegex","dynamicParsed","srcRegEx","getSrc","metadata","service","decodeURIComponent","youtube","vimeo","vine","videopress","microsoftStream","tiktok","dailymotion"],"mappings":"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","sourcesContent":["/**\n * Strip away any remaining parameters following `?` or `/` or '&' for YouTube shortcode strings.\n *\n * @note this function is not meant to work with url strings containing a protocol like https://\n * @param {String} shortcodeString - the parameter string\n * @returns {String}\n */\nfunction stripParameters(shortcodeString) {\n\t// Split parameters or split folder separator\n\tif (shortcodeString.includes('?')) {\n\t\treturn shortcodeString.split('?')[0];\n\t}\n\n\tif (shortcodeString.includes('/')) {\n\t\treturn shortcodeString.split('/')[0];\n\t}\n\n\tif (shortcodeString.includes('&')) {\n\t\treturn shortcodeString.split('&')[0];\n\t}\n\n\treturn shortcodeString;\n}\n\n/**\n * Get the Youtube Video id.\n * @param {string} youtubeStr - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nexport default function youtube(youtubeString) {\n\tlet string_ = youtubeString;\n\n\t// Remove time hash at the end of the string\n\tstring_ = string_.replace(/#t=.*$/, '');\n\n\t// Strip the leading protocol\n\tstring_ = string_.replace(/^https?:\\/\\//, '');\n\n\t// Shortcode\n\tconst shortcode = /youtube:\\/\\/|youtu\\.be\\/|y2u\\.be\\//g;\n\n\tif (shortcode.test(string_)) {\n\t\tconst shortcodeid = string_.split(shortcode)[1];\n\t\treturn stripParameters(shortcodeid);\n\t}\n\n\t// /v/ or /vi/\n\tconst inlinev = /\\/v\\/|\\/vi\\//g;\n\n\tif (inlinev.test(string_)) {\n\t\tconst inlineid = string_.split(inlinev)[1];\n\t\treturn stripParameters(inlineid);\n\t}\n\n\t// V= or vi=\n\tconst parameterv = /v=|vi=/g;\n\n\tif (parameterv.test(string_)) {\n\t\tconst array = string_.split(parameterv);\n\t\treturn stripParameters(array[1].split('&')[0]);\n\t}\n\n\t// Format an_webp\n\tconst parameterwebp = /\\/an_webp\\//g;\n\n\tif (parameterwebp.test(string_)) {\n\t\tconst webp = string_.split(parameterwebp)[1];\n\t\treturn stripParameters(webp);\n\t}\n\n\t// /e/\n\tconst eformat = /\\/e\\//g;\n\n\tif (eformat.test(string_)) {\n\t\tconst estring = string_.split(eformat)[1];\n\t\treturn stripParameters(estring);\n\t}\n\n\t// Embed\n\tconst embedreg = /\\/embed\\//g;\n\n\tif (embedreg.test(string_)) {\n\t\tconst embedid = string_.split(embedreg)[1];\n\t\treturn stripParameters(embedid);\n\t}\n\n\t// ignore /user/username pattern\n\tconst usernamereg = /\\/user\\/([a-zA-Z\\d]*)$/g;\n\n\tif (usernamereg.test(string_)) {\n\t\treturn undefined;\n\t}\n\n\t// User\n\tconst userreg = /\\/user\\/(?!.*videos)/g;\n\n\tif (userreg.test(string_)) {\n\t\tconst elements = string_.split('/');\n\t\treturn stripParameters(elements.pop());\n\t}\n\n\t// Attribution_link\n\tconst attrreg = /\\/attribution_link\\?.*v%3D([^%&]*)(%26|&|$)/;\n\n\tif (attrreg.test(string_)) {\n\t\treturn stripParameters(string_.match(attrreg)[1]);\n\t}\n\n\treturn undefined;\n}\n","/**\n * Get the vimeo id.\n *\n * @param {String} vimeoString the url from which you want to extract the id\n * @returns {String|undefined}\n */\nexport default function vimeo(vimeoString) {\n\tlet string_ = vimeoString;\n\n\tif (string_.includes('#')) {\n\t\t[string_] = string_.split('#');\n\t}\n\n\tif (string_.includes('?') && !string_.includes('clip_id=')) {\n\t\t[string_] = string_.split('?');\n\t}\n\n\tlet id;\n\tlet array;\n\n\tconst event = /https?:\\/\\/vimeo\\.com\\/event\\/(\\d+)$/;\n\n\tconst eventMatches = event.exec(string_);\n\n\tif (eventMatches && eventMatches[1]) {\n\t\treturn eventMatches[1];\n\t}\n\n\tconst primary = /https?:\\/\\/vimeo\\.com\\/(\\d+)/;\n\n\tconst matches = primary.exec(string_);\n\tif (matches && matches[1]) {\n\t\treturn matches[1];\n\t}\n\n\tconst vimeoPipe = [\n\t\t'https?://player.vimeo.com/video/[0-9]+$',\n\t\t'https?://vimeo.com/channels',\n\t\t'groups',\n\t\t'album',\n\t].join('|');\n\n\tconst vimeoRegex = new RegExp(vimeoPipe, 'gim');\n\n\tif (vimeoRegex.test(string_)) {\n\t\tarray = string_.split('/');\n\t\tif (array && array.length > 0) {\n\t\t\tid = array.pop();\n\t\t}\n\t} else if (/clip_id=/gim.test(string_)) {\n\t\tarray = string_.split('clip_id=');\n\t\tif (array && array.length > 0) {\n\t\t\t[id] = array[1].split('&');\n\t\t}\n\t}\n\n\treturn id;\n}\n","/**\n * Get the vine id.\n * @param {string} string_ - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nexport default function vine(string_) {\n\tconst regex = /https:\\/\\/vine\\.co\\/v\\/([a-zA-Z\\d]*)\\/?/;\n\tconst matches = regex.exec(string_);\n\n\tif (matches && matches.length > 1) {\n\t\treturn matches[1];\n\t}\n\n\treturn undefined;\n}\n","/**\n * Get the VideoPress id.\n * @param {string} urlString - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nexport default function videopress(urlString) {\n\tlet idRegex;\n\n\tif (urlString.includes('embed')) {\n\t\tidRegex = /embed\\/(\\w{8})/;\n\t\treturn urlString.match(idRegex)[1];\n\t}\n\n\tidRegex = /\\/v\\/(\\w{8})/;\n\n\tconst matches = urlString.match(idRegex);\n\n\tif (matches && matches.length > 0) {\n\t\treturn matches[1];\n\t}\n\n\treturn undefined;\n}\n","/**\n * Get the Microsoft Stream id.\n * @param {string} urlString - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nexport default function microsoftStream(urlString) {\n\tconst regex = (urlString.includes('embed'))\n\t\t? /https:\\/\\/web\\.microsoftstream\\.com\\/embed\\/video\\/([a-zA-Z\\d-]*)\\/?/\n\t\t: /https:\\/\\/web\\.microsoftstream\\.com\\/video\\/([a-zA-Z\\d-]*)\\/?/;\n\tconst matches = regex.exec(urlString);\n\n\tif (matches && matches.length > 1) {\n\t\treturn matches[1];\n\t}\n\n\treturn undefined;\n}\n","/**\n * Get the tiktok id.\n * @param {string} urlString - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nexport default function tiktok(urlString) {\n\t// Parse basic url and embeds\n\tconst basicReg = /tiktok\\.com(.*)\\/video\\/(\\d+)/gm;\n\tconst basicParsed = basicReg.exec(urlString);\n\tif (basicParsed && basicParsed.length > 2) {\n\t\treturn basicParsed[2];\n\t}\n\n\treturn undefined;\n}\n","/**\n * Get the dailymotion id.\n * @param {string} urlString - the url from which you want to extract the id\n * @returns {string|undefined}\n */\nexport default function dailymotion(urlString) {\n\t// Parse basic url and embeds\n\tconst basicReg = /dailymotion\\.com(.*)(video)\\/([a-zA-Z\\d]+)/gm;\n\tconst basicParsed = basicReg.exec(urlString);\n\tif (basicParsed) {\n\t\treturn basicParsed[3];\n\t}\n\n\t// Parse shortlink\n\tconst shortRegex = /dai\\.ly\\/([a-zA-Z\\d]+)/gm;\n\tconst shortParsed = shortRegex.exec(urlString);\n\tif (shortParsed && shortParsed.length > 1) {\n\t\treturn shortParsed[1];\n\t}\n\n\t// Dynamic link\n\tconst dynamicRegex = /dailymotion\\.com(.*)video=([a-zA-Z\\d]+)/gm;\n\tconst dynamicParsed = dynamicRegex.exec(urlString);\n\tif (dynamicParsed && dynamicParsed.length > 2) {\n\t\treturn dynamicParsed[2];\n\t}\n\n\treturn undefined;\n}\n","\n/**\n * Get the value assigned to a \"src\" attribute in a string, or undefined.\n * @param {String} input\n * @returns {String|undefined}\n */\nexport default function getSrc(input) {\n\tif (typeof input !== 'string') {\n\t\tthrow new TypeError('getSrc expected a string');\n\t}\n\n\tconst srcRegEx = /src=\"(.*?)\"/gm;\n\tconst matches = srcRegEx.exec(input);\n\n\tif (matches && matches.length >= 2) {\n\t\treturn matches[1];\n\t}\n\n\treturn undefined;\n}\n","import youtube from './youtube.js';\nimport vimeo from './vimeo.js';\nimport vine from './vine.js';\nimport videopress from './videopress.js';\nimport microsoftStream from './microsoftstream.js';\nimport tiktok from './tiktok.js';\nimport dailymotion from './dailymotion.js';\nimport getSrc from './utils/get-src.js';\n\n/**\n * Get the id and service from a video url.\n * @param {String} urlString - the url from which you want to extract the id\n * @returns {Object}\n */\nfunction getVideoId(urlString) {\n\tif (typeof urlString !== 'string') {\n\t\tthrow new TypeError('get-video-id expects a string');\n\t}\n\n\tlet string_ = urlString;\n\n\tif (/<iframe/gi.test(string_)) {\n\t\tstring_ = getSrc(string_);\n\t}\n\n\t// Remove surrounding whitespaces or linefeeds\n\tstring_ = string_.trim();\n\n\t// Remove the '-nocookie' flag from youtube urls\n\tstring_ = string_.replace('-nocookie', '');\n\n\t// Remove any leading `www.`\n\tstring_ = string_.replace('/www.', '/');\n\n\tlet metadata = {\n\t\tid: null,\n\t\tservice: null,\n\t};\n\n\t// Try to handle google redirection uri\n\tif (/\\/\\/google/.test(string_)) {\n\t\t// Find the redirection uri\n\t\tconst matches = string_.match(/url=([^&]+)&/);\n\n\t\t// Decode the found uri and replace current url string - continue with final link\n\t\tif (matches) {\n\t\t\t// JavaScript can get encoded URI\n\t\t\tstring_ = decodeURIComponent(matches[1]);\n\t\t}\n\t}\n\n\tif (/youtube|youtu\\.be|y2u\\.be|i.ytimg\\./.test(string_)) {\n\t\tmetadata = {\n\t\t\tid: youtube(string_),\n\t\t\tservice: 'youtube',\n\t\t};\n\t} else if (/vimeo/.test(string_)) {\n\t\tmetadata = {\n\t\t\tid: vimeo(string_),\n\t\t\tservice: 'vimeo',\n\t\t};\n\t} else if (/vine/.test(string_)) {\n\t\tmetadata = {\n\t\t\tid: vine(string_),\n\t\t\tservice: 'vine',\n\t\t};\n\t} else if (/videopress/.test(string_)) {\n\t\tmetadata = {\n\t\t\tid: videopress(string_),\n\t\t\tservice: 'videopress',\n\t\t};\n\t} else if (/microsoftstream/.test(string_)) {\n\t\tmetadata = {\n\t\t\tid: microsoftStream(string_),\n\t\t\tservice: 'microsoftstream',\n\t\t};\n\t} else if (/tiktok\\.com/.test(string_)) {\n\t\tmetadata = {\n\t\t\tid: tiktok(string_),\n\t\t\tservice: 'tiktok',\n\t\t};\n\t} else if (/(dailymotion\\.com|dai\\.ly)/.test(string_)) {\n\t\tmetadata = {\n\t\t\tid: dailymotion(string_),\n\t\t\tservice: 'dailymotion',\n\t\t};\n\t}\n\n\treturn metadata;\n}\n\nexport default getVideoId;\n"]},"metadata":{},"sourceType":"module"}