{"ast":null,"code":"import * as axs from './axs';\nexport const getMessagesAction = convoId => async dispatch => {\n  try {\n    const {\n      data\n    } = await axs.getMessagesApi(convoId);\n    console.log(data);\n    dispatch({\n      type: 'GET_ALL_MESSAGES',\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n    return false;\n  }\n};\nexport const readMessagesAction = convoId => async dispatch => {\n  try {\n    const {\n      data\n    } = await axs.readMessagesApi(convoId);\n    console.log(data);\n    dispatch({\n      type: 'READ_MESSAGES',\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n    return false;\n  }\n};\nexport const postMessagesAction = (messageData, socket, setLoading, setProgress, setmessageData) => async dispatch => {\n  console.log(\"Message Action Act\");\n\n  try {\n    console.log(messageData);\n    const {\n      data\n    } = await axs.postMessagesApi(messageData);\n    const socketMessageData = data.newMessage;\n    const socketNotificationData = data.newNotification;\n    dispatch({\n      type: 'POST_MESSAGE',\n      payload: socketMessageData\n    });\n    setmessageData({ ...messageData,\n      body: '',\n      type: ''\n    });\n    setLoading(false);\n    setProgress(0);\n    socket.current.emit(\"sendMessage\", {\n      socketMessageData\n    });\n    socket.current.emit(\"sendNotification\", {\n      socketNotificationData\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/Users/Zoorura/Documents/Projects/Zoorura/zoorura-webClient/src/components/Midwares/rdx/actions/messagesAction.js"],"names":["axs","getMessagesAction","convoId","dispatch","data","getMessagesApi","console","log","type","payload","error","readMessagesAction","readMessagesApi","postMessagesAction","messageData","socket","setLoading","setProgress","setmessageData","postMessagesApi","socketMessageData","newMessage","socketNotificationData","newNotification","body","current","emit"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,OAArB;AAEA,OAAO,MAAMC,iBAAiB,GAAIC,OAAD,IAAa,MAAOC,QAAP,IAAoB;AAC9D,MAAG;AACC,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMJ,GAAG,CAACK,cAAJ,CAAmBH,OAAnB,CAArB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AAEAD,IAAAA,QAAQ,CAAE;AAACK,MAAAA,IAAI,EAAE,kBAAP;AAA2BC,MAAAA,OAAO,EAAEL;AAApC,KAAF,CAAR;AAIH,GARD,CAQE,OAAMM,KAAN,EAAa;AACXJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AAEA,WAAO,KAAP;AACH;AACJ,CAdM;AAeP,OAAO,MAAMC,kBAAkB,GAAIT,OAAD,IAAa,MAAOC,QAAP,IAAoB;AAC/D,MAAG;AACC,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMJ,GAAG,CAACY,eAAJ,CAAoBV,OAApB,CAArB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AAEAD,IAAAA,QAAQ,CAAE;AAACK,MAAAA,IAAI,EAAE,eAAP;AAAwBC,MAAAA,OAAO,EAAEL;AAAjC,KAAF,CAAR;AAIH,GARD,CAQE,OAAMM,KAAN,EAAa;AACXJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AAEA,WAAO,KAAP;AACH;AACJ,CAdM;AAiBP,OAAO,MAAMG,kBAAkB,GAAG,CAACC,WAAD,EAAcC,MAAd,EAAsBC,UAAtB,EAAkCC,WAAlC,EAA+CC,cAA/C,KAAkE,MAAOf,QAAP,IAAoB;AACpHG,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ;;AACA,MAAG;AAECD,IAAAA,OAAO,CAACC,GAAR,CAAYO,WAAZ;AACA,UAAM;AAACV,MAAAA;AAAD,QAAS,MAAMJ,GAAG,CAACmB,eAAJ,CAAoBL,WAApB,CAArB;AAGA,UAAMM,iBAAiB,GAAGhB,IAAI,CAACiB,UAA/B;AACA,UAAMC,sBAAsB,GAAGlB,IAAI,CAACmB,eAApC;AAIApB,IAAAA,QAAQ,CAAE;AAACK,MAAAA,IAAI,EAAE,cAAP;AAAuBC,MAAAA,OAAO,EAAEW;AAAhC,KAAF,CAAR;AACAF,IAAAA,cAAc,CAAC,EAAC,GAAGJ,WAAJ;AAAiBU,MAAAA,IAAI,EAAE,EAAvB;AAA2BhB,MAAAA,IAAI,EAAC;AAAhC,KAAD,CAAd;AACAQ,IAAAA,UAAU,CAAC,KAAD,CAAV;AAEAC,IAAAA,WAAW,CAAC,CAAD,CAAX;AAGAF,IAAAA,MAAM,CAACU,OAAP,CAAeC,IAAf,CAAoB,aAApB,EAAmC;AAC/BN,MAAAA;AAD+B,KAAnC;AAGCL,IAAAA,MAAM,CAACU,OAAP,CAAeC,IAAf,CAAoB,kBAApB,EAAwC;AACpCJ,MAAAA;AADoC,KAAxC;AAKJ,GA1BD,CA0BE,OAAMZ,KAAN,EAAa;AACXJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACH;AACJ,CA/BM","sourcesContent":["import * as axs from './axs';\n\nexport const getMessagesAction = (convoId) => async (dispatch) => {\n    try{\n        const {data} = await axs.getMessagesApi(convoId);\n        console.log(data);\n\n        dispatch ({type: 'GET_ALL_MESSAGES', payload: data});\n\n        \n\n    } catch(error) {\n        console.log(error);\n\n        return false;\n    }\n}\nexport const readMessagesAction = (convoId) => async (dispatch) => {\n    try{\n        const {data} = await axs.readMessagesApi(convoId);\n        console.log(data); \n\n        dispatch ({type: 'READ_MESSAGES', payload: data});\n\n        \n\n    } catch(error) {\n        console.log(error);\n\n        return false;\n    }\n}\n \n\nexport const postMessagesAction = (messageData, socket, setLoading, setProgress, setmessageData) => async (dispatch) => {\n    console.log(\"Message Action Act\");\n    try{\n\n        console.log(messageData);\n        const {data} = await axs.postMessagesApi(messageData);\n        \n\n        const socketMessageData = data.newMessage;\n        const socketNotificationData = data.newNotification; \n\n        \n    \n        dispatch ({type: 'POST_MESSAGE', payload: socketMessageData});\n        setmessageData({...messageData, body: '', type:''});\n        setLoading(false);\n        \n        setProgress(0); \n        \n\n        socket.current.emit(\"sendMessage\", {\n            socketMessageData\n         });\n         socket.current.emit(\"sendNotification\", {\n             socketNotificationData        \n         });\n         \n\n    } catch(error) {  \n        console.log(error);\n    }\n}"]},"metadata":{},"sourceType":"module"}