{"ast":null,"code":"import * as axs from './axs';\nexport const getReviewsAction = postId => async dispatch => {\n  try {\n    const {\n      data\n    } = await axs.getReviewsApi(postId);\n    console.log(data);\n    dispatch({\n      type: 'GET_POST_REVIEWS',\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n    return false;\n  }\n};\nexport const postReviewsAction = reviewData => async dispatch => {\n  console.log(\"postReview Action Act\");\n\n  try {\n    const {\n      data\n    } = await axs.postReviewsApi(reviewData); // dispatch ({type: 'POST_REVIEW', payload: data});\n\n    const newReview = data.newReview;\n    const reviewedPost = data.reviewedPost;\n    dispatch({\n      type: 'POST_REVIEW',\n      payload: newReview\n    });\n    dispatch({\n      type: 'REVIEW_DIARY',\n      payload: reviewedPost\n    });\n    setreviewData({\n      reviewedId: '',\n      reviewedPostId: '',\n      body: ''\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const patchReviewsAction = reviewData => async dispatch => {\n  console.log(\"patchReview Action Act\");\n\n  try {\n    const {\n      data\n    } = await axs.patchReviewsApi(reviewData);\n    dispatch({\n      type: 'PATCH_REVIEW',\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deleteReviewsAction = postId => async dispatch => {\n  try {\n    await axs.deleteReviewsApi(postId);\n    dispatch({\n      type: 'DELETE_REVIEW',\n      payload: postId\n    }); // replace with data._Id\n  } catch (error) {\n    console.log(error);\n    return false;\n  }\n};","map":{"version":3,"sources":["/Users/Zoorura/Documents/Projects/Zoorura/zoorura-webClient/src/components/Midwares/rdx/actions/reviewsAction.js"],"names":["axs","getReviewsAction","postId","dispatch","data","getReviewsApi","console","log","type","payload","error","postReviewsAction","reviewData","postReviewsApi","newReview","reviewedPost","setreviewData","reviewedId","reviewedPostId","body","patchReviewsAction","patchReviewsApi","deleteReviewsAction","deleteReviewsApi"],"mappings":"AAAA,OAAO,KAAKA,GAAZ,MAAqB,OAArB;AAEA,OAAO,MAAMC,gBAAgB,GAAIC,MAAD,IAAY,MAAOC,QAAP,IAAoB;AAC5D,MAAG;AACC,UAAM;AAACC,MAAAA;AAAD,QAAS,MAAMJ,GAAG,CAACK,aAAJ,CAAkBH,MAAlB,CAArB;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYH,IAAZ;AAEAD,IAAAA,QAAQ,CAAE;AAACK,MAAAA,IAAI,EAAE,kBAAP;AAA2BC,MAAAA,OAAO,EAAEL;AAApC,KAAF,CAAR;AAIH,GARD,CAQE,OAAMM,KAAN,EAAa;AACXJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AAEA,WAAO,KAAP;AACH;AACJ,CAdM;AAiBP,OAAO,MAAMC,iBAAiB,GAAIC,UAAD,IAAgB,MAAOT,QAAP,IAAoB;AACjEG,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;;AACA,MAAG;AACC,UAAM;AAACH,MAAAA;AAAD,QAAS,MAAMJ,GAAG,CAACa,cAAJ,CAAmBD,UAAnB,CAArB,CADD,CAEC;;AACA,UAAME,SAAS,GAAGV,IAAI,CAACU,SAAvB;AACA,UAAMC,YAAY,GAAGX,IAAI,CAACW,YAA1B;AAEAZ,IAAAA,QAAQ,CAAE;AAACK,MAAAA,IAAI,EAAE,aAAP;AAAsBC,MAAAA,OAAO,EAAEK;AAA/B,KAAF,CAAR;AACAX,IAAAA,QAAQ,CAAE;AAACK,MAAAA,IAAI,EAAE,cAAP;AAAuBC,MAAAA,OAAO,EAAEM;AAAhC,KAAF,CAAR;AACAC,IAAAA,aAAa,CAAC;AAACC,MAAAA,UAAU,EAAC,EAAZ;AAAgBC,MAAAA,cAAc,EAAC,EAA/B;AAAmCC,MAAAA,IAAI,EAAE;AAAzC,KAAD,CAAb;AAGH,GAXD,CAWE,OAAMT,KAAN,EAAa;AACXJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACH;AACJ,CAhBM;AAiBP,OAAO,MAAMU,kBAAkB,GAAIR,UAAD,IAAgB,MAAOT,QAAP,IAAoB;AAClEG,EAAAA,OAAO,CAACC,GAAR,CAAY,wBAAZ;;AACA,MAAG;AACC,UAAM;AAACH,MAAAA;AAAD,QAAS,MAAMJ,GAAG,CAACqB,eAAJ,CAAoBT,UAApB,CAArB;AACAT,IAAAA,QAAQ,CAAE;AAACK,MAAAA,IAAI,EAAE,cAAP;AAAuBC,MAAAA,OAAO,EAAEL;AAAhC,KAAF,CAAR;AAEH,GAJD,CAIE,OAAMM,KAAN,EAAa;AACXJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACH;AACJ,CATM;AAUP,OAAO,MAAMY,mBAAmB,GAAIpB,MAAD,IAAY,MAAOC,QAAP,IAAoB;AAC/D,MAAG;AAEE,UAAMH,GAAG,CAACuB,gBAAJ,CAAqBrB,MAArB,CAAN;AACAC,IAAAA,QAAQ,CAAE;AAACK,MAAAA,IAAI,EAAE,eAAP;AAAwBC,MAAAA,OAAO,EAAEP;AAAjC,KAAF,CAAR,CAHF,CAGuD;AAEzD,GALD,CAKE,OAAMQ,KAAN,EAAa;AAEXJ,IAAAA,OAAO,CAACC,GAAR,CAAYG,KAAZ;AACA,WAAO,KAAP;AACH;AACJ,CAXM","sourcesContent":["import * as axs from './axs';\n\nexport const getReviewsAction = (postId) => async (dispatch) => {\n    try{\n        const {data} = await axs.getReviewsApi(postId);\n        console.log(data);\n\n        dispatch ({type: 'GET_POST_REVIEWS', payload: data});\n\n        \n\n    } catch(error) {\n        console.log(error);\n\n        return false; \n    }\n}\n\n\nexport const postReviewsAction = (reviewData) => async (dispatch) => {\n    console.log(\"postReview Action Act\");\n    try{\n        const {data} = await axs.postReviewsApi(reviewData);  \n        // dispatch ({type: 'POST_REVIEW', payload: data});\n        const newReview = data.newReview;\n        const reviewedPost = data.reviewedPost;\n\n        dispatch ({type: 'POST_REVIEW', payload: newReview});\n        dispatch ({type: 'REVIEW_DIARY', payload: reviewedPost});\n        setreviewData({reviewedId:'', reviewedPostId:'', body: ''});\n        \n        \n    } catch(error) {  \n        console.log(error);\n    }\n}\nexport const patchReviewsAction = (reviewData) => async (dispatch) => {\n    console.log(\"patchReview Action Act\");\n    try{\n        const {data} = await axs.patchReviewsApi(reviewData);  \n        dispatch ({type: 'PATCH_REVIEW', payload: data});\n        \n    } catch(error) {  \n        console.log(error);\n    }\n}\nexport const deleteReviewsAction = (postId) => async (dispatch) => {\n    try{\n\n         await axs.deleteReviewsApi(postId);\n         dispatch ({type: 'DELETE_REVIEW', payload: postId}); // replace with data._Id\n    \n    } catch(error) {\n\n        console.log(error);\n        return false;\n    }\n}"]},"metadata":{},"sourceType":"module"}