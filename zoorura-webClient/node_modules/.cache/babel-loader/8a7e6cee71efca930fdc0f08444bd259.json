{"ast":null,"code":"import * as axs from './axs';\nexport const getConvosAction = id => async dispatch => {\n  try {\n    dispatch({\n      type: \"SEARCHING_CONVO\"\n    });\n    const {\n      data\n    } = await axs.getConvosApi(id);\n    console.log(data);\n    dispatch({\n      type: 'GET_ALL_CONVOS',\n      payload: data\n    });\n    console.log(data);\n\n    if (data.length > 0) {\n      dispatch({\n        type: \"YES_CONVO\"\n      });\n    } else if (data.length === 0) {\n      dispatch({\n        type: \"NO_CONVO\"\n      });\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const postConvosAction = (convoData, setLoading, setpopConvoForm, socket) => async dispatch => {\n  try {\n    const {\n      data\n    } = await axs.postConvosApi(convoData);\n    dispatch({\n      type: 'EDIT_MINI_PROFILE',\n      data: data === null || data === void 0 ? void 0 : data.miniProfile\n    });\n    setLoading(false);\n    setpopConvoForm(false);\n    const socketNotificationData = data === null || data === void 0 ? void 0 : data.newNotification;\n    const socketConvoData = data === null || data === void 0 ? void 0 : data.newConvo;\n    socket.current.emit(\"sendNotification\", {\n      socketNotificationData\n    });\n    socket.current.emit(\"sendConvo\", {\n      socketConvoData\n    });\n    dispatch({\n      type: 'POST_CONVO',\n      payload: data === null || data === void 0 ? void 0 : data.newConvo\n    });\n  } catch (error) {\n    console.log(error === null || error === void 0 ? void 0 : error.message);\n  }\n};\nexport const patchConvosAction = (id, convoData) => async dispatch => {\n  try {\n    const {\n      data\n    } = await axs.patchConvosApi(id, convoData);\n    dispatch({\n      type: 'PATCH_CONVO',\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deleteConvosAction = id => async dispatch => {\n  try {\n    const {\n      data\n    } = await axs.deleteConvosApi(id);\n    dispatch({\n      type: 'DELETE_CONVO',\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/Users/Zoorura/Documents/Projects/Zoorura/zoorura-webClient/src/components/Midwares/rdx/actions/convosAction.js"],"names":["axs","getConvosAction","id","dispatch","type","data","getConvosApi","console","log","payload","length","error","postConvosAction","convoData","setLoading","setpopConvoForm","socket","postConvosApi","miniProfile","socketNotificationData","newNotification","socketConvoData","newConvo","current","emit","message","patchConvosAction","patchConvosApi","deleteConvosAction","deleteConvosApi"],"mappings":"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","sourcesContent":["import * as axs from './axs';\n\nexport const getConvosAction = (id) => async (dispatch) => {\n    try{\n        dispatch({type:\"SEARCHING_CONVO\"});\n\n        const {data} = await axs.getConvosApi(id);\n        console.log(data);\n\n        dispatch ({type: 'GET_ALL_CONVOS', payload: data});\n        console.log(data);\n        if(data.length > 0){\n\n            dispatch({type:\"YES_CONVO\"});\n\n        }else if(data.length === 0){ \n\n                dispatch({type:\"NO_CONVO\"});\n        }\n    } catch(error) {\n        console.log(error);\n    } \n} \n\n\nexport const postConvosAction = (convoData, setLoading, setpopConvoForm, socket) => async (dispatch) => {\n    try{\n        const {data} = await axs.postConvosApi(convoData);\n \n        dispatch ({type: 'EDIT_MINI_PROFILE', data: data?.miniProfile});\n        setLoading(false);\n        setpopConvoForm(false);\n        const socketNotificationData = data?.newNotification;\n        const socketConvoData = data?.newConvo;\n\n        socket.current.emit(\"sendNotification\", {\n            socketNotificationData        \n        });\n        socket.current.emit(\"sendConvo\", {\n            socketConvoData        \n        });\n        dispatch ({type: 'POST_CONVO', payload: data?.newConvo});\n        \n\n    } catch(error) { \n        console.log(error?.message);\n    }\n}\n\nexport const patchConvosAction = (id, convoData) => async (dispatch) => {\n    try{\n        const {data} = await axs.patchConvosApi(id, convoData);\n\n        dispatch ({type: 'PATCH_CONVO', payload: data});\n    } catch(error) {\n        console.log(error);\n    }\n}\nexport const deleteConvosAction = (id) => async (dispatch) => {\n    try{\n        const {data} = await axs.deleteConvosApi(id);\n\n        dispatch ({type: 'DELETE_CONVO', payload: data});\n    } catch(error) {\n        console.log(error);\n    }\n}"]},"metadata":{},"sourceType":"module"}