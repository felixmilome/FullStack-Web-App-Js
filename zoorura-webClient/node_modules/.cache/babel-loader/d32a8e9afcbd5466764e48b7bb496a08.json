{"ast":null,"code":"export const createImage = url => new Promise((resolve, reject) => {\n  const image = new Image();\n  image.addEventListener('load', () => resolve(image));\n  image.addEventListener('error', error => reject(error));\n  image.setAttribute('crossOrigin', 'anonymous'); // needed to avoid cross-origin issues on CodeSandbox\n\n  image.src = url;\n});\nexport function getRadianAngle(degreeValue) {\n  return degreeValue * Math.PI / 180;\n}\n/**\n * Returns the new bounding area of a rotated rectangle.\n */\n\nexport function rotateSize(width, height, rotation) {\n  const rotRad = getRadianAngle(rotation);\n  return {\n    width: Math.abs(Math.cos(rotRad) * width) + Math.abs(Math.sin(rotRad) * height),\n    height: Math.abs(Math.sin(rotRad) * width) + Math.abs(Math.cos(rotRad) * height)\n  };\n}\n/**\n * This function was adapted from the one in the ReadMe of https://github.com/DominicTobias/react-image-crop\n */\n\nexport async function getCroppedImg(imageSrc, pixelCrop, rotation = 0, flip = {\n  horizontal: false,\n  vertical: false\n}) {\n  const image = await createImage(imageSrc);\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n\n  if (!ctx) {\n    return null;\n  }\n\n  const rotRad = getRadianAngle(rotation); // calculate bounding box of the rotated image\n\n  const {\n    width: bBoxWidth,\n    height: bBoxHeight\n  } = rotateSize(image.width, image.height, rotation); // set canvas size to match the bounding box\n\n  canvas.width = bBoxWidth;\n  canvas.height = bBoxHeight; // translate canvas context to a central location to allow rotating and flipping around the center\n\n  ctx.translate(bBoxWidth / 2, bBoxHeight / 2);\n  ctx.rotate(rotRad);\n  ctx.scale(flip.horizontal ? -1 : 1, flip.vertical ? -1 : 1);\n  ctx.translate(-image.width / 2, -image.height / 2); // draw rotated image\n\n  ctx.drawImage(image, 0, 0); // croppedAreaPixels values are bounding box relative\n  // extract the cropped image using these values\n\n  const data = ctx.getImageData(pixelCrop.x, pixelCrop.y, pixelCrop.width, pixelCrop.height);\n  return data; // set canvas width to final desired crop size - this will clear existing context\n\n  canvas.width = pixelCrop.width;\n  canvas.height = pixelCrop.height; // paste generated rotate image at the top left corner\n  //return ctx.putImageData(data, 0, 0)\n  // As Base64 string\n  // return canvas.toDataURL('image/jpeg');\n  // As a blob\n  // return new Promise((resolve, reject) => {\n  //     canvas.toBlob((file) => {\n  //     resolve(URL.createObjectURL(file))\n  //     }, 'image/jpeg')\n  // })\n}","map":{"version":3,"sources":["/Users/Zoorura/Documents/Projects/Zoorura/zoorura-web/src/components/Midwares/cleaners/imageCrop.js"],"names":["createImage","url","Promise","resolve","reject","image","Image","addEventListener","error","setAttribute","src","getRadianAngle","degreeValue","Math","PI","rotateSize","width","height","rotation","rotRad","abs","cos","sin","getCroppedImg","imageSrc","pixelCrop","flip","horizontal","vertical","canvas","document","createElement","ctx","getContext","bBoxWidth","bBoxHeight","translate","rotate","scale","drawImage","data","getImageData","x","y"],"mappings":"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","sourcesContent":["export const createImage = (url) =>\n  new Promise((resolve, reject) => {\n    const image = new Image()\n    image.addEventListener('load', () => resolve(image))\n    image.addEventListener('error', (error) => reject(error))\n    image.setAttribute('crossOrigin', 'anonymous') // needed to avoid cross-origin issues on CodeSandbox\n    image.src = url\n  })\n\nexport function getRadianAngle(degreeValue) {\n  return (degreeValue * Math.PI) / 180\n}\n\n/**\n * Returns the new bounding area of a rotated rectangle.\n */\nexport function rotateSize(width, height, rotation) {\n  const rotRad = getRadianAngle(rotation)\n\n  return {\n    width:\n      Math.abs(Math.cos(rotRad) * width) + Math.abs(Math.sin(rotRad) * height),\n    height:\n      Math.abs(Math.sin(rotRad) * width) + Math.abs(Math.cos(rotRad) * height),\n  }\n}\n\n/**\n * This function was adapted from the one in the ReadMe of https://github.com/DominicTobias/react-image-crop\n */\nexport async function getCroppedImg(\n  imageSrc,\n  pixelCrop,\n  rotation = 0,\n  flip = { horizontal: false, vertical: false }\n) {\n        const image = await createImage(imageSrc)\n        const canvas = document.createElement('canvas')\n        const ctx = canvas.getContext('2d')\n\n        if (!ctx) {\n            return null\n        }\n\n        const rotRad = getRadianAngle(rotation)\n\n        // calculate bounding box of the rotated image\n        const { width: bBoxWidth, height: bBoxHeight } = rotateSize(\n            image.width,\n            image.height,\n            rotation\n        )\n\n        // set canvas size to match the bounding box\n        canvas.width = bBoxWidth\n        canvas.height = bBoxHeight\n\n        // translate canvas context to a central location to allow rotating and flipping around the center\n        ctx.translate(bBoxWidth / 2, bBoxHeight / 2)\n        ctx.rotate(rotRad)\n        ctx.scale(flip.horizontal ? -1 : 1, flip.vertical ? -1 : 1)\n        ctx.translate(-image.width / 2, -image.height / 2)\n\n        // draw rotated image\n        ctx.drawImage(image, 0, 0);\n        \n\n        // croppedAreaPixels values are bounding box relative\n        // extract the cropped image using these values\n        const data = ctx.getImageData(\n            pixelCrop.x,\n            pixelCrop.y,\n            pixelCrop.width,\n            pixelCrop.height\n        )\n        return data;\n\n        // set canvas width to final desired crop size - this will clear existing context\n        canvas.width = pixelCrop.width\n        canvas.height = pixelCrop.height\n       \n\n        // paste generated rotate image at the top left corner\n        //return ctx.putImageData(data, 0, 0)\n\n        // As Base64 string\n        // return canvas.toDataURL('image/jpeg');\n\n       // As a blob\n        // return new Promise((resolve, reject) => {\n        //     canvas.toBlob((file) => {\n        //     resolve(URL.createObjectURL(file))\n            \n        //     }, 'image/jpeg')\n        // })\n\n        \n}\n"]},"metadata":{},"sourceType":"module"}