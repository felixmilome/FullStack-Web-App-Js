{"ast":null,"code":"import * as axs from './axs';\nexport const getReviewsAction = postId => async dispatch => {\n  try {\n    const {\n      data\n    } = await axs.getReviewsApi(postId);\n    console.log(data);\n    dispatch({\n      type: 'GET_POST_REVIEWS',\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n    return false;\n  }\n};\nexport const postReviewsAction = (reviewData1, setreviewData, setReviewLoading, setReviewDelivery, socket, setSpam) => async dispatch => {\n  console.log(\"postReview Action Act\");\n\n  try {\n    const {\n      data\n    } = await axs.postReviewsApi(reviewData1); // dispatch ({type: 'POST_REVIEW', payload: data});\n\n    if (data === 'Spam') {\n      setSpam(true);\n      setTimeout(function () {\n        setSpam(false);\n      }, 3000);\n    }\n\n    console.log(data);\n    const newReview = data.newReview;\n    const newNotification = data.newNotification;\n    const reviewedPost = data.reviewedPost;\n    const socketNotificationData = data.newNotification;\n    const reviewData = data.newReview; //reviewNotifier(data.newNotification, data.newReview);\n\n    socket.current.emit(\"sendNotification\", {\n      socketNotificationData\n    });\n    socket.current.emit(\"sendReview\", {\n      reviewData\n    });\n    dispatch({\n      type: 'POST_REVIEW',\n      payload: newReview\n    });\n    dispatch({\n      type: 'REVIEW_DIARY',\n      payload: reviewedPost\n    });\n    setreviewData({\n      reviewedId: '',\n      reviewedPostId: '',\n      body: ''\n    });\n    setReviewLoading(false);\n    setReviewDelivery(true);\n    setTimeout(function () {\n      setReviewDelivery(false);\n    }, 2000);\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const patchReviewsAction = (reviewData, setReviewLoading, setReviewDelivery, setReviewEditor) => async dispatch => {\n  console.log(\"patchReview Action Act\");\n\n  try {\n    const {\n      data\n    } = await axs.patchReviewsApi(reviewData);\n    dispatch({\n      type: 'PATCH_REVIEW',\n      payload: data\n    });\n    setReviewDelivery(true);\n    setTimeout(function () {\n      setReviewDelivery(false);\n    }, 2000);\n    setReviewLoading(false);\n    setReviewEditor(false);\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const deleteReviewsAction = (reviewId, setReviewLoading, setDeleteDelivery) => async dispatch => {\n  try {\n    setDeleteDelivery(true);\n    const {\n      data\n    } = await axs.deleteReviewsApi(reviewId); // setDeleteDelivery (true); // its disturbing coz when it deletes map it deletes surePop with it also during dispatch\n\n    console.log(data);\n\n    if (data.message === 'reviewDeleted') {\n      setDeleteDelivery(true);\n      setTimeout(function () {\n        dispatch({\n          type: 'DELETE_REVIEW',\n          payload: reviewId\n        });\n      }, 2000); //setReviewLoading(false); //Also disturbin\n    } else {\n      return;\n    }\n  } catch (error) {\n    console.log(error);\n    return false;\n  }\n};","map":{"version":3,"sources":["/Users/Zoorura/Documents/Projects/Zoorura/zoorura-webClient/src/components/Midwares/rdx/actions/reviewsAction.js"],"names":["axs","getReviewsAction","postId","dispatch","data","getReviewsApi","console","log","type","payload","error","postReviewsAction","reviewData1","setreviewData","setReviewLoading","setReviewDelivery","socket","setSpam","postReviewsApi","setTimeout","newReview","newNotification","reviewedPost","socketNotificationData","reviewData","current","emit","reviewedId","reviewedPostId","body","patchReviewsAction","setReviewEditor","patchReviewsApi","deleteReviewsAction","reviewId","setDeleteDelivery","deleteReviewsApi","message"],"mappings":"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","sourcesContent":["import * as axs from './axs';\n\nexport const getReviewsAction = (postId) => async (dispatch) => {\n    try{\n        const {data} = await axs.getReviewsApi(postId);\n        console.log(data);\n\n        dispatch ({type: 'GET_POST_REVIEWS', payload: data});\n\n        \n\n    } catch(error) {\n        console.log(error);\n\n        return false; \n    } \n}\n\n\nexport const postReviewsAction = (reviewData1, setreviewData, setReviewLoading, setReviewDelivery, socket, setSpam) => async (dispatch) => {\n    console.log(\"postReview Action Act\");\n    try{\n        const {data} = await axs.postReviewsApi(reviewData1);  \n        // dispatch ({type: 'POST_REVIEW', payload: data});\n\n        if(data==='Spam'){\n            setSpam(true);\n            setTimeout( function() {setSpam(false)}, 3000);\n        }\n        console.log(data);\n        const newReview = data.newReview;\n        const newNotification = data.newNotification;\n        const reviewedPost = data.reviewedPost;\n\n        const socketNotificationData = data.newNotification;\n        const reviewData = data.newReview;\n\n        //reviewNotifier(data.newNotification, data.newReview);\n\n        socket.current.emit(\"sendNotification\", {\n            socketNotificationData        \n        });\n        \n        socket.current.emit(\"sendReview\", {\n            reviewData\n        });  \n\n        dispatch ({type: 'POST_REVIEW', payload: newReview});\n        dispatch ({type: 'REVIEW_DIARY', payload: reviewedPost});\n        setreviewData({reviewedId:'', reviewedPostId:'', body: ''}); \n\n        setReviewLoading(false);\n\n        setReviewDelivery(true);\n        setTimeout( function() {setReviewDelivery(false)}, 2000);\n        \n        \n    } catch(error) {  \n        console.log(error);\n    }\n}\nexport const patchReviewsAction = (reviewData, setReviewLoading, setReviewDelivery, setReviewEditor) => async (dispatch) => {\n\n    console.log(\"patchReview Action Act\");\n\n    try{\n        const {data} = await axs.patchReviewsApi(reviewData);  \n        dispatch ({type: 'PATCH_REVIEW', payload: data});\n\n        \n\n        setReviewDelivery(true);\n        setTimeout( function() {setReviewDelivery(false)}, 2000);\n        setReviewLoading(false);\n        setReviewEditor(false)\n        \n        \n        \n    } catch(error) {  \n        console.log(error);\n    }\n}\nexport const deleteReviewsAction = (reviewId, setReviewLoading, setDeleteDelivery) => async (dispatch) => {\n    try{\n        \n        \n        setDeleteDelivery(true);\n         const {data} = await axs.deleteReviewsApi(reviewId);\n\n        // setDeleteDelivery (true); // its disturbing coz when it deletes map it deletes surePop with it also during dispatch\n     \n         console.log(data);\n\n        if (data.message === 'reviewDeleted'){\n\n         \n        setDeleteDelivery (true);\n        setTimeout (function () {dispatch ({type: 'DELETE_REVIEW', payload: reviewId})},2000); \n       \n        //setReviewLoading(false); //Also disturbin\n         \n        } else{\n            return;\n        }\n    \n    } catch(error) {\n\n        console.log(error);\n        return false;\n    }\n}"]},"metadata":{},"sourceType":"module"}