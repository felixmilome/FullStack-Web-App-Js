{"ast":null,"code":"const watch = require('node-watch');\n\nconst path = require('path');\n\nconst fs = require('fs');\n\nconst {\n  input,\n  output\n} = require('./res/paths');\n\nconst getVideosFromFolder = folder => {\n  const files = fs.readdirSync(path.resolve(folder));\n  return files.filter(founded => founded.match(/.*\\.(mp4|avi)/gi));\n};\n\nconst sync = () => {\n  const origin = getVideosFromFolder(input);\n  const dest = getVideosFromFolder(output);\n  const missingVideos = [];\n  origin.forEach((v, i) => {\n    if (!dest.includes(v)) {\n      missingVideos.push(v);\n    }\n  });\n  return missingVideos;\n};\n\nconst watchFiles = (call, notify) => {\n  watch(path.resolve(input), {\n    recursive: false\n  }, function (evt, name) {\n    if (evt === 'update' && name.match(/.*\\.(mp4|avi)/gi)) {\n      const video = name.split('\\\\');\n      call(video[video.length - 1], notify);\n    }\n  });\n};\n\nmodule.exports = {\n  watchFiles,\n  sync\n};","map":{"version":3,"sources":["/Users/Zoorura/Documents/Projects/Zoorura/zoorura-webClient/node_modules/video-compressor/src/routine.js"],"names":["watch","require","path","fs","input","output","getVideosFromFolder","folder","files","readdirSync","resolve","filter","founded","match","sync","origin","dest","missingVideos","forEach","v","i","includes","push","watchFiles","call","notify","recursive","evt","name","video","split","length","module","exports"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,YAAD,CAArB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAApB;;AACA,MAAME,EAAE,GAAGF,OAAO,CAAC,IAAD,CAAlB;;AAEA,MAAM;AAACG,EAAAA,KAAD;AAAQC,EAAAA;AAAR,IAAkBJ,OAAO,CAAC,aAAD,CAA/B;;AAGA,MAAMK,mBAAmB,GAAIC,MAAD,IAAY;AACpC,QAAMC,KAAK,GAAGL,EAAE,CAACM,WAAH,CAAeP,IAAI,CAACQ,OAAL,CAAaH,MAAb,CAAf,CAAd;AAEA,SAAOC,KAAK,CAACG,MAAN,CAAaC,OAAO,IAAIA,OAAO,CAACC,KAAR,CAAc,iBAAd,CAAxB,CAAP;AACH,CAJD;;AAMA,MAAMC,IAAI,GAAG,MAAM;AACf,QAAMC,MAAM,GAAGT,mBAAmB,CAACF,KAAD,CAAlC;AACA,QAAMY,IAAI,GAAGV,mBAAmB,CAACD,MAAD,CAAhC;AAEA,QAAMY,aAAa,GAAG,EAAtB;AACAF,EAAAA,MAAM,CAACG,OAAP,CAAe,CAACC,CAAD,EAAIC,CAAJ,KAAU;AACrB,QAAI,CAACJ,IAAI,CAACK,QAAL,CAAcF,CAAd,CAAL,EAAuB;AACnBF,MAAAA,aAAa,CAACK,IAAd,CAAmBH,CAAnB;AACH;AACJ,GAJD;AAMA,SAAOF,aAAP;AACH,CAZD;;AAcA,MAAMM,UAAU,GAAG,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACjCzB,EAAAA,KAAK,CAACE,IAAI,CAACQ,OAAL,CAAaN,KAAb,CAAD,EAAsB;AAACsB,IAAAA,SAAS,EAAE;AAAZ,GAAtB,EAA0C,UAAUC,GAAV,EAAeC,IAAf,EAAqB;AAChE,QAAID,GAAG,KAAK,QAAR,IAAoBC,IAAI,CAACf,KAAL,CAAW,iBAAX,CAAxB,EAAuD;AACnD,YAAMgB,KAAK,GAAGD,IAAI,CAACE,KAAL,CAAW,IAAX,CAAd;AACAN,MAAAA,IAAI,CAACK,KAAK,CAACA,KAAK,CAACE,MAAN,GAAe,CAAhB,CAAN,EAA0BN,MAA1B,CAAJ;AACH;AACJ,GALI,CAAL;AAMH,CAPD;;AASAO,MAAM,CAACC,OAAP,GAAiB;AAACV,EAAAA,UAAD;AAAaT,EAAAA;AAAb,CAAjB","sourcesContent":["const watch = require('node-watch');\r\nconst path = require('path');\r\nconst fs = require('fs');\r\n\r\nconst {input, output} = require('./res/paths');\r\n\r\n\r\nconst getVideosFromFolder = (folder) => {\r\n    const files = fs.readdirSync(path.resolve(folder));\r\n\r\n    return files.filter(founded => founded.match(/.*\\.(mp4|avi)/gi));\r\n};\r\n\r\nconst sync = () => {\r\n    const origin = getVideosFromFolder(input);\r\n    const dest = getVideosFromFolder(output);\r\n\r\n    const missingVideos = [];\r\n    origin.forEach((v, i) => {\r\n        if (!dest.includes(v)) {\r\n            missingVideos.push(v);\r\n        }\r\n    });\r\n\r\n    return missingVideos;\r\n};\r\n\r\nconst watchFiles = (call, notify) => {\r\n    watch(path.resolve(input), {recursive: false}, function (evt, name) {\r\n        if (evt === 'update' && name.match(/.*\\.(mp4|avi)/gi)) {\r\n            const video = name.split('\\\\');\r\n            call(video[video.length - 1], notify);\r\n        }\r\n    });\r\n};\r\n\r\nmodule.exports = {watchFiles, sync};\r\n"]},"metadata":{},"sourceType":"script"}