{"ast":null,"code":"//IG\nexport const urIg = urInput => {\n  //https://www.instagram.com/reel/CWLrjRQIEnu/embed good\n  // https://www.instagram.com/p/CWaoRfSrQez/?utm_source=ig_web_copy_link org\n  //https://www.instagram.com/embed/CWaoRfSrQez/ result\n  let trim = urInput.trim(); // let result1 =trim.replace(/\\/tv\\//gi, \"/embed/\");\n  // let result2 = result1.replace(/\\/reel\\//gi, \"/embed/\");\n  // let result3 = result2.replace(/\\/p\\//gi, \"/embed/\");\n\n  let emb = \"embed\";\n  let result1 = trim.replace(/\\?utm_medium=copy_link/gi, \"\");\n  let result2 = result1.replace(/\\?utm_source=ig_web_copy_link/gi, \"\");\n  let resultFinal = result2.concat(emb);\n  return resultFinal;\n}; //TIKTOK\n\nexport const urTk = urInput => {\n  let trim = urInput.trim();\n  let result = trim.split('/video/');\n  let result2 = result[1];\n  let str1 = \"https://www.tiktok.com/embed/\";\n  let str2 = result2;\n  let resultFinal = str1.concat(str2);\n  return resultFinal;\n}; //YOUTB\n\nexport const urYt = urInput => {\n  let trim = urInput.trim();\n  let result1 = trim.replace(/youtu.be/gi, \"www.youtube.com/embed\");\n  let result2 = result1.replace(/watch\\?v\\=/gi, \"embed/\");\n  let resultFinal = result2.substring(0, 41);\n  return resultFinal;\n}; //FB\n\nexport const urFb = urInput => {\n  let repl = urInput.replace(/https:\\/\\//gi, \"\");\n  let htp = repl.replace(/\\//gi, \"%2F\");\n  let trim = htp.trim();\n  let str1 = \"https://www.facebook.com/plugins/post.php?height=200&href=https%3A%2F%2F\";\n  let str2 = trim;\n  let res = str1.concat(str2);\n  let ending = \"%2F&show_text=false&width=200&\";\n  let finalResult = res.concat(ending);\n  return finalResult;\n}; //REDDIT\n\nexport const urRd = urInput => {\n  let trim = urInput.trim();\n  let stru = trim.replace(/reddit/gi, \"redditmedia\");\n  let str2 = stru.replace(/\\?utm_source=share&utm_medium=web2x&context=3/gi, \"\");\n  let str3 = str2.concat('?');\n  let utm = \"ref_source=embed&amp;ref=share&amp;embed=true\";\n  let finalResult = str3.concat(utm);\n  return finalResult;\n}; //TWITTER - REQUIRES NONE BUT TEMPLATE\n//PINTEREST\n\nexport const urPn = urInput => {\n  let trim = urInput.trim();\n  let thenum = trim.replace(/^\\D+/gi, '');\n  let thenum2 = thenum.replace(/\\//gi, '');\n  let finalResult = \"https://assets.pinterest.com/ext/embed.html?id=\".concat(thenum2);\n  return finalResult;\n}; //SOUNDCLOUD\n\nexport const urSn = urInput => {\n  let trim = urInput.trim();\n  let finalResult = trim.replace(/https:/gi, '');\n  return finalResult;\n}; //TWITCH\n\nexport const urTch = urInput => {\n  let trim = urInput.trim();\n  let finalResult = trim.replace(/https:\\/\\/www.twitch.tv\\//gi, 'https://player.twitch.tv/?channel=');\n  return finalResult;\n}; //GOOGLE DRIVE\n\nexport const urDr = urInput => {\n  let trim = urInput.trim();\n  let repl = trim.replace(/\\?usp=sharing/gi, \"\");\n  let finalResult = repl.replace(/view/gi, \"preview\");\n  return finalResult;\n}; // if(urInput.includes('video')){\n//     let trim = urInput.trim();\n//     let str1 = \"https://www.facebook.com/plugins/video.php?href=\";\n//     let str2 = trim;\n//     let resultFinal = str1.concat(str2);\n//     return resultFinal;\n// }else if (urInput.includes('photo')){\n// let trim = urInput.trim();\n// let str1 = \"https://www.facebook.com/plugins/post.php?href=\";\n// let str2 = trim;\n// let resultFinal = str1.concat(str2);\n// return resultFinal;\n// }\n// IMAGE CROPPER\n\nexport const createImage = url => new Promise((resolve, reject) => {\n  const image = new Image();\n  image.addEventListener('load', () => resolve(image));\n  image.addEventListener('error', error => reject(error));\n  image.setAttribute('crossOrigin', 'anonymous'); // needed to avoid cross-origin issues on CodeSandbox\n\n  image.src = url;\n});\nexport function getRadianAngle(degreeValue) {\n  return degreeValue * Math.PI / 180;\n}\n/**\n * Returns the new bounding area of a rotated rectangle.\n */\n\nexport function rotateSize(width, height, rotation) {\n  const rotRad = getRadianAngle(rotation);\n  return {\n    width: Math.abs(Math.cos(rotRad) * width) + Math.abs(Math.sin(rotRad) * height),\n    height: Math.abs(Math.sin(rotRad) * width) + Math.abs(Math.cos(rotRad) * height)\n  };\n}\n/**\n * This function was adapted from the one in the ReadMe of https://github.com/DominicTobias/react-image-crop\n */\n\nexport default async function getCroppedImg(imageSrc, pixelCrop, rotation = 0, flip = {\n  horizontal: false,\n  vertical: false\n}) {\n  const image = await createImage(imageSrc);\n  const canvas = document.createElement('canvas');\n  const ctx = canvas.getContext('2d');\n\n  if (!ctx) {\n    return null;\n  }\n\n  const rotRad = getRadianAngle(rotation); // calculate bounding box of the rotated image\n\n  const {\n    width: bBoxWidth,\n    height: bBoxHeight\n  } = rotateSize(image.width, image.height, rotation); // set canvas size to match the bounding box\n\n  canvas.width = bBoxWidth;\n  canvas.height = bBoxHeight; // translate canvas context to a central location to allow rotating and flipping around the center\n\n  ctx.translate(bBoxWidth / 2, bBoxHeight / 2);\n  ctx.rotate(rotRad);\n  ctx.scale(flip.horizontal ? -1 : 1, flip.vertical ? -1 : 1);\n  ctx.translate(-image.width / 2, -image.height / 2); // draw rotated image\n\n  ctx.drawImage(image, 0, 0); // croppedAreaPixels values are bounding box relative\n  // extract the cropped image using these values\n\n  const data = ctx.getImageData(pixelCrop.x, pixelCrop.y, pixelCrop.width, pixelCrop.height); // set canvas width to final desired crop size - this will clear existing context\n\n  canvas.width = pixelCrop.width;\n  canvas.height = pixelCrop.height; // paste generated rotate image at the top left corner\n\n  ctx.putImageData(data, 0, 0); // As Base64 string\n  // return canvas.toDataURL('image/jpeg');\n  // As a blob\n\n  return new Promise((resolve, reject) => {\n    canvas.toBlob(file => {\n      resolve(URL.createObjectURL(file));\n    }, 'image/jpeg');\n  });\n}","map":{"version":3,"sources":["/Users/Zoorura/Documents/Projects/Zoorura/zoorura-web/src/components/Midwares/cleaners/cleaner.js"],"names":["urIg","urInput","trim","emb","result1","replace","result2","resultFinal","concat","urTk","result","split","str1","str2","urYt","substring","urFb","repl","htp","res","ending","finalResult","urRd","stru","str3","utm","urPn","thenum","thenum2","urSn","urTch","urDr","createImage","url","Promise","resolve","reject","image","Image","addEventListener","error","setAttribute","src","getRadianAngle","degreeValue","Math","PI","rotateSize","width","height","rotation","rotRad","abs","cos","sin","getCroppedImg","imageSrc","pixelCrop","flip","horizontal","vertical","canvas","document","createElement","ctx","getContext","bBoxWidth","bBoxHeight","translate","rotate","scale","drawImage","data","getImageData","x","y","putImageData","toBlob","file","URL","createObjectURL"],"mappings":"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","sourcesContent":["//IG\nexport const urIg = (urInput) => {\n    //https://www.instagram.com/reel/CWLrjRQIEnu/embed good\n   // https://www.instagram.com/p/CWaoRfSrQez/?utm_source=ig_web_copy_link org\n   //https://www.instagram.com/embed/CWaoRfSrQez/ result\n    let trim = urInput.trim();\n    // let result1 =trim.replace(/\\/tv\\//gi, \"/embed/\");\n    // let result2 = result1.replace(/\\/reel\\//gi, \"/embed/\");\n    // let result3 = result2.replace(/\\/p\\//gi, \"/embed/\");\n    let emb= \"embed\";  \n    let result1 = trim.replace(/\\?utm_medium=copy_link/gi, \"\");\n    let result2= result1.replace(/\\?utm_source=ig_web_copy_link/gi, \"\");\n    let resultFinal = result2.concat(emb);\n\n    return resultFinal;\n\n}\n//TIKTOK\nexport const urTk = (urInput) => {\n\n    let trim = urInput.trim();\n    let result = trim.split('/video/');\n    let result2 = result[1];\n    let str1 = \"https://www.tiktok.com/embed/\";\n    let str2 = result2;\n    let resultFinal = str1.concat(str2);\n\n    return resultFinal;\n}\n//YOUTB\nexport const urYt = (urInput) => {\n\n    let trim = urInput.trim();\n    let result1 = trim.replace(/youtu.be/gi, \"www.youtube.com/embed\");\n    let result2 = result1.replace(/watch\\?v\\=/gi, \"embed/\");\n    let resultFinal = result2.substring(0, 41);\n\n    return resultFinal;\n\n}\n//FB\nexport const urFb = (urInput) => {\n  \n    let repl = urInput.replace(/https:\\/\\//gi, \"\");\n    let htp = repl.replace(/\\//gi, \"%2F\");\n    let trim = htp.trim();\n    let str1 = \"https://www.facebook.com/plugins/post.php?height=200&href=https%3A%2F%2F\";\n    let str2 = trim;\n    let res = str1.concat(str2);\n    let ending = \"%2F&show_text=false&width=200&\"\n    let finalResult = res.concat(ending);\n\n    return finalResult;\n}\n//REDDIT\nexport const urRd = (urInput) => {\n    let trim = urInput.trim();\n    let stru = trim.replace(/reddit/gi, \"redditmedia\");\n    let str2 = stru.replace(/\\?utm_source=share&utm_medium=web2x&context=3/gi, \"\"); \n    let str3 = str2.concat('?');   \n    let utm = \"ref_source=embed&amp;ref=share&amp;embed=true\"; \n    let finalResult = str3.concat(utm);\n\n    return finalResult;\n}\n\n//TWITTER - REQUIRES NONE BUT TEMPLATE\n\n//PINTEREST\nexport const urPn = (urInput) => {\n\n    let trim = urInput.trim();\n    let thenum = trim.replace( /^\\D+/gi, '');\n    let thenum2 = thenum.replace(/\\//gi, '');\n    let finalResult = (\"https://assets.pinterest.com/ext/embed.html?id=\").concat(thenum2);\n    \n    return finalResult;\n}\n\n//SOUNDCLOUD\nexport const urSn = (urInput) => {\n\n    let trim = urInput.trim();\n    let finalResult = trim.replace(/https:/gi, '');\n    \n    return finalResult;\n}\n\n//TWITCH\nexport const urTch = (urInput) => {\n    \n    let trim = urInput.trim();\n    let finalResult = trim.replace(/https:\\/\\/www.twitch.tv\\//gi, 'https://player.twitch.tv/?channel=');\n    \n    return finalResult;\n\n}\n\n//GOOGLE DRIVE\nexport const urDr = (urInput) => {\n\n    let trim = urInput.trim();   \n    let repl = trim.replace(/\\?usp=sharing/gi, \"\");\n    let finalResult = repl.replace(/view/gi, \"preview\");\n\n    return finalResult;\n\n}\n\n  // if(urInput.includes('video')){\n    //     let trim = urInput.trim();\n    //     let str1 = \"https://www.facebook.com/plugins/video.php?href=\";\n    //     let str2 = trim;\n    //     let resultFinal = str1.concat(str2);\n    //     return resultFinal;\n       \n    // }else if (urInput.includes('photo')){\n        // let trim = urInput.trim();\n        // let str1 = \"https://www.facebook.com/plugins/post.php?href=\";\n        // let str2 = trim;\n        // let resultFinal = str1.concat(str2);\n        // return resultFinal;\n    // }\n\n\n// IMAGE CROPPER\nexport const createImage = (url) =>\n  new Promise((resolve, reject) => {\n    const image = new Image()\n    image.addEventListener('load', () => resolve(image))\n    image.addEventListener('error', (error) => reject(error))\n    image.setAttribute('crossOrigin', 'anonymous') // needed to avoid cross-origin issues on CodeSandbox\n    image.src = url\n  })\n\nexport function getRadianAngle(degreeValue) {\n  return (degreeValue * Math.PI) / 180\n}\n\n/**\n * Returns the new bounding area of a rotated rectangle.\n */\nexport function rotateSize(width, height, rotation) {\n  const rotRad = getRadianAngle(rotation)\n\n  return {\n    width:\n      Math.abs(Math.cos(rotRad) * width) + Math.abs(Math.sin(rotRad) * height),\n    height:\n      Math.abs(Math.sin(rotRad) * width) + Math.abs(Math.cos(rotRad) * height),\n  }\n}\n\n/**\n * This function was adapted from the one in the ReadMe of https://github.com/DominicTobias/react-image-crop\n */\nexport default async function getCroppedImg(\n  imageSrc,\n  pixelCrop,\n  rotation = 0,\n  flip = { horizontal: false, vertical: false }\n) {\n  const image = await createImage(imageSrc)\n  const canvas = document.createElement('canvas')\n  const ctx = canvas.getContext('2d')\n\n  if (!ctx) {\n    return null\n  }\n\n  const rotRad = getRadianAngle(rotation)\n\n  // calculate bounding box of the rotated image\n  const { width: bBoxWidth, height: bBoxHeight } = rotateSize(\n    image.width,\n    image.height,\n    rotation\n  )\n\n  // set canvas size to match the bounding box\n  canvas.width = bBoxWidth\n  canvas.height = bBoxHeight\n\n  // translate canvas context to a central location to allow rotating and flipping around the center\n  ctx.translate(bBoxWidth / 2, bBoxHeight / 2)\n  ctx.rotate(rotRad)\n  ctx.scale(flip.horizontal ? -1 : 1, flip.vertical ? -1 : 1)\n  ctx.translate(-image.width / 2, -image.height / 2)\n\n  // draw rotated image\n  ctx.drawImage(image, 0, 0)\n\n  // croppedAreaPixels values are bounding box relative\n  // extract the cropped image using these values\n  const data = ctx.getImageData(\n    pixelCrop.x,\n    pixelCrop.y,\n    pixelCrop.width,\n    pixelCrop.height\n  )\n\n  // set canvas width to final desired crop size - this will clear existing context\n  canvas.width = pixelCrop.width\n  canvas.height = pixelCrop.height\n\n  // paste generated rotate image at the top left corner\n  ctx.putImageData(data, 0, 0)\n\n  // As Base64 string\n  // return canvas.toDataURL('image/jpeg');\n\n  // As a blob\n  return new Promise((resolve, reject) => {\n    canvas.toBlob((file) => {\n      resolve(URL.createObjectURL(file))\n    }, 'image/jpeg')\n  })\n}\n"]},"metadata":{},"sourceType":"module"}