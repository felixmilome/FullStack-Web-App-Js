{"ast":null,"code":"import * as axs from './axs';\nexport const getDiaryAction = diaryId => async dispatch => {\n  try {\n    const {\n      data\n    } = await axs.getDiaryApi(diaryId);\n    console.log(data);\n    dispatch({\n      type: 'GET_DIARY',\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const getDiariesAction = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await axs.getDiariesApi();\n    console.log(data);\n    const {\n      followedDiaries,\n      popularDiaries,\n      randomDiaries\n    } = data;\n    dispatch({\n      type: 'GET_FOLLOWED_DIARIES',\n      payload: followedDiaries\n    });\n    dispatch({\n      type: 'GET_POPULAR_DIARIES',\n      payload: popularDiaries\n    });\n    dispatch({\n      type: 'GET_RANDOM_DIARIES',\n      payload: randomDiaries\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const postDiariesAction = (diary, setpopPosted, navigate, setDisplayer, setSpam) => async dispatch => {\n  try {\n    const {\n      data\n    } = await axs.postDiariesApi(diary);\n\n    if (data === 'Spam') {\n      setSpam(true);\n    } else {\n      setpopPosted(true);\n      dispatch({\n        type: 'POST_DIARY',\n        payload: data\n      }); //navigate ('/');\n\n      window.location = '/';\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const postDisplayDiariesAction = (diary, setPopDisplayed, navigate, setSpam, socket) => async dispatch => {\n  try {\n    const {\n      data\n    } = await axs.postDiariesApi(diary);\n    console.log(socket);\n\n    if (data === 'Spam') {\n      setSpam(true);\n      setTimeout(function () {\n        setSpam(false);\n      }, 2000);\n    } else {\n      const socketNotificationData = data.newNotification;\n      setPopDisplayed(true);\n      socket.current.emit(\"sendNotification\", {\n        //put it bottom\n        socketNotificationData\n      });\n      navigate('/');\n      window.location.reload(true);\n    } // const newDisplay = data.newDisplay;\n    // const displayedDiary = data.displayedDiary;\n    // dispatch ({type: 'POST_DIARY', payload: newDisplay});\n    // dispatch ({type: 'DIARY_DISPLAY', payload: displayedDiary});\n    // setDisplayer(true);\n    // setTimeout( function() {setDisplayer (false)}, 2000); \n\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const patchDiariesAction = (id, diariesEditData, setpopPosted, setSpam) => async dispatch => {\n  try {\n    //console.log('patchAction')\n    const {\n      data\n    } = await axs.patchDiariesApi(id, diariesEditData);\n    console.log(data);\n\n    if (data === 'Spam') {\n      setSpam(true);\n      setTimeout(function () {\n        setSpam(false);\n      }, 2000);\n    } else if (data === 'Success') {\n      setpopPosted(true); //setTimeout( function() {setpopOptions(false)}, 2000);\n\n      window.location = '/';\n    }\n  } catch (error) {\n    console.log(error.message); // console.log(diariesEditData);\n    // console.log(id);\n  }\n};\nexport const deleteDiariesAction = id => async dispatch => {\n  try {\n    await axs.deleteDiariesApi(id);\n    window.location = '/'; //dispatch({type: 'DELETE_DIARY', payload: id});\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const tipDiariesAction = (id, tipperData, setpopSure, setpopTip) => async dispatch => {\n  try {\n    const {\n      data\n    } = await axs.tipDiariesApi(id, tipperData);\n    dispatch({\n      type: 'TIP_DIARY',\n      payload: data\n    }); // if(dispatch)\n    // {\n\n    setpopSure(false);\n    setpopTip(false); //}\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const reviewDiariesAction = (id, reviewData, setreviewData) => async dispatch => {\n  try {\n    const {\n      data\n    } = await axs.reviewDiariesApi(id, reviewData);\n    dispatch({\n      type: 'REVIEW_DIARY',\n      payload: data\n    });\n    setreviewData({\n      reviewer: '',\n      reviewerId: '',\n      body: ''\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/Users/Zoorura/Documents/Projects/Zoorura/zoorura-webClient/src/components/Midwares/rdx/actions/diariesAction.js"],"names":["axs","getDiaryAction","diaryId","dispatch","data","getDiaryApi","console","log","type","payload","error","getDiariesAction","getDiariesApi","followedDiaries","popularDiaries","randomDiaries","postDiariesAction","diary","setpopPosted","navigate","setDisplayer","setSpam","postDiariesApi","window","location","postDisplayDiariesAction","setPopDisplayed","socket","setTimeout","socketNotificationData","newNotification","current","emit","reload","patchDiariesAction","id","diariesEditData","patchDiariesApi","message","deleteDiariesAction","deleteDiariesApi","tipDiariesAction","tipperData","setpopSure","setpopTip","tipDiariesApi","reviewDiariesAction","reviewData","setreviewData","reviewDiariesApi","reviewer","reviewerId","body"],"mappings":"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","sourcesContent":["import * as axs from './axs';\n\nexport const getDiaryAction = (diaryId) => async (dispatch) => {\n    try{\n\n        const {data} = await axs.getDiaryApi(diaryId);\n        console.log(data);\n\n        dispatch ({type: 'GET_DIARY', payload: data}); \n\n    } catch(error) {\n        console.log(error); \n    }\n}\n \nexport const getDiariesAction = () => async (dispatch) => {\n    try{\n        const {data} = await axs.getDiariesApi();\n        console.log(data);\n\n        const {followedDiaries, popularDiaries, randomDiaries} = data;\n\n        dispatch ({type: 'GET_FOLLOWED_DIARIES', payload: followedDiaries});\n        dispatch ({type: 'GET_POPULAR_DIARIES', payload: popularDiaries}); \n        dispatch ({type: 'GET_RANDOM_DIARIES', payload: randomDiaries});  \n\n    } catch(error) {\n        console.log(error); \n    }\n}\nexport const postDiariesAction = (diary, setpopPosted, navigate, setDisplayer, setSpam) => async (dispatch) => {\n    try{\n        \n\n            const {data} = await axs.postDiariesApi(diary);\n\n            if (data === 'Spam'){\n                setSpam (true);\n                \n            }else{\n                setpopPosted(true);\n\n                dispatch ({type: 'POST_DIARY', payload: data});            \n                //navigate ('/');\n                window.location = ('/') \n            }\n\n        \n    } catch(error) {\n        console.log(error);\n    }\n}\nexport const postDisplayDiariesAction = (diary, setPopDisplayed, navigate, setSpam, socket) => async (dispatch) => {\n    try{\n        \n\n\n            const {data} = await axs.postDiariesApi(diary); \n            \n            console.log(socket);\n\n            if (data === 'Spam'){ \n\n                setSpam (true);\n                setTimeout( function() {setSpam (false)}, 2000); \n\n            }else{\n                \n                const socketNotificationData = data.newNotification;\n                \n\n                setPopDisplayed(true);\n\n                socket.current.emit(\"sendNotification\", { //put it bottom\n                    socketNotificationData        \n                });\n\n                navigate ('/');\n                window.location.reload(true); \n\n            }\n\n\n\n            // const newDisplay = data.newDisplay;\n            // const displayedDiary = data.displayedDiary;\n\n            // dispatch ({type: 'POST_DIARY', payload: newDisplay});\n            // dispatch ({type: 'DIARY_DISPLAY', payload: displayedDiary});\n            // setDisplayer(true);\n            // setTimeout( function() {setDisplayer (false)}, 2000); \n      \n\n        \n    } catch(error) {\n        console.log(error);\n    }\n}\nexport const patchDiariesAction = (id, diariesEditData, setpopPosted, setSpam) => async (dispatch)=>{\n    try{\n\n        //console.log('patchAction')\n        const {data} = await axs.patchDiariesApi(id, diariesEditData);\n        console.log(data);\n\n        if (data === 'Spam'){\n            setSpam (true);\n            setTimeout( function() {setSpam (false)}, 2000);\n\n        }else if (data === 'Success'){\n          \n            setpopPosted(true);\n            //setTimeout( function() {setpopOptions(false)}, 2000);\n            window.location = ('/') \n            \n        }\n    } catch(error){\n        console.log(error.message);\n        // console.log(diariesEditData);\n        // console.log(id);\n    }\n}\n\nexport const deleteDiariesAction = (id) => async (dispatch) =>{\n        try{\n            await axs.deleteDiariesApi(id);\n            window.location = ('/') \n            //dispatch({type: 'DELETE_DIARY', payload: id});\n\n        } catch(error){\n            console.log(error);\n        }\n}\n\n\nexport const tipDiariesAction = (id, tipperData, setpopSure, setpopTip) => async (dispatch)=>{\n    try{\n        const {data} = await axs.tipDiariesApi(id, tipperData);  \n       \n        dispatch ({type: 'TIP_DIARY', payload: data});\n        // if(dispatch)\n        // {\n        setpopSure(false);\n        setpopTip(false);\n        //}\n        \n    } catch(error){\n        console.log(error);\n     \n    }\n}\nexport const reviewDiariesAction = (id, reviewData, setreviewData) => async (dispatch)=>{\n    try{\n        const {data} = await axs.reviewDiariesApi(id, reviewData); \n        \n        dispatch ({type: 'REVIEW_DIARY', payload: data});\n\n        setreviewData({reviewer:'', reviewerId:'', body: ''});\n    } catch(error){\n        console.log(error);\n       \n    }\n}\n"]},"metadata":{},"sourceType":"module"}