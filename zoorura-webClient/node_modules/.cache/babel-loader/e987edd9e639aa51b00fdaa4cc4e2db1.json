{"ast":null,"code":"import * as axs from './axs';\nexport const getTipsAction = postId => async dispatch => {\n  try {\n    const {\n      data\n    } = await axs.getTipsApi(postId);\n    console.log(data);\n    dispatch({\n      type: 'GET_POST_TIPS',\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n    return false;\n  }\n};\nexport const messageTipsAction = (tipData, setPopTip, setTipLoading, setTipDelivery, socket) => async dispatch => {\n  console.log(\"Message Tips Action Act\");\n\n  try {\n    const {\n      data\n    } = await axs.postTipsApi(tipData);\n    console.log(data);\n    const newTip = data.newTip;\n    const socketMessageData = data.tippedMessage;\n    const socketNotificationData = data.newNotification;\n    dispatch({\n      type: 'POST_TIP',\n      payload: newTip\n    });\n    dispatch({\n      type: 'TIP_MESSAGE',\n      payload: socketMessageData\n    });\n    setPopTip(false);\n    setTipLoading(false);\n    setTipDelivery(true);\n    setTimeout(function () {\n      setTipDelivery(false);\n    }, 2000);\n    socket.current.emit(\"sendNotification\", {\n      socketNotificationData\n    });\n    socket.current.emit(\"patchMessage\", {\n      socketMessageData\n    });\n  } catch (error) {\n    console.log(error.message);\n  }\n};\nexport const postTipsAction = (tipData, setpopSure, setpopTip, setTipLoading, setTipDelivery, socket) => async dispatch => {\n  console.log(\"Tips Action Act\");\n\n  try {\n    const {\n      data\n    } = await axs.postTipsApi(tipData);\n    const newTip = data.newTip;\n    const tippedPost = data.tippedPost;\n    const socketNotificationData = data === null || data === void 0 ? void 0 : data.newNotification;\n    console.log(tippedPost);\n    dispatch({\n      type: 'POST_TIP',\n      payload: newTip\n    });\n    setpopSure(false);\n    setpopTip(false);\n    setTipLoading(false);\n    setTipDelivery(true);\n    setTimeout(function () {\n      setTipDelivery(false);\n    }, 2000);\n\n    if (newTip.type === 'post') {\n      dispatch({\n        type: 'TIP_DIARY',\n        payload: tippedPost\n      });\n      socket.current.emit(\"sendNotification\", {\n        socketNotificationData\n      });\n    } else if (newTip.type === 'review') {\n      dispatch({\n        type: 'TIP_REVIEW',\n        payload: tippedPost\n      });\n      socket.current.emit(\"sendNotification\", {\n        socketNotificationData\n      });\n    } else if (newTip.type === 'displayTip') {\n      dispatch({\n        type: 'TIP_DISPLAY_NOTIFICATION',\n        payload: tippedPost\n      });\n      socket.current.emit(\"sendNotification\", {\n        socketNotificationData\n      });\n    }\n  } catch (error) {\n    console.log(error.message);\n  }\n};","map":{"version":3,"sources":["/Users/Zoorura/Documents/Projects/Zoorura/zoorura-webClient/src/components/Midwares/rdx/actions/tipsAction.js"],"names":["axs","getTipsAction","postId","dispatch","data","getTipsApi","console","log","type","payload","error","messageTipsAction","tipData","setPopTip","setTipLoading","setTipDelivery","socket","postTipsApi","newTip","socketMessageData","tippedMessage","socketNotificationData","newNotification","setTimeout","current","emit","message","postTipsAction","setpopSure","setpopTip","tippedPost"],"mappings":"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","sourcesContent":["import * as axs from './axs';\n\nexport const getTipsAction = (postId) => async (dispatch) => {\n    try{\n        const {data} = await axs.getTipsApi(postId);\n        console.log(data);\n\n        dispatch ({type: 'GET_POST_TIPS', payload: data});\n\n        \n\n    } catch(error) { \n        console.log(error); \n\n        return false;\n    } \n}\nexport const messageTipsAction = (tipData, setPopTip, setTipLoading, setTipDelivery, socket) => async (dispatch) => {\n    console.log(\"Message Tips Action Act\");\n    try{\n        const {data} = await axs.postTipsApi(tipData); \n        console.log(data); \n        const newTip = data.newTip; \n        const socketMessageData = data.tippedMessage;\n        const socketNotificationData = data.newNotification;  \n        \n         \n    \n        dispatch ({type: 'POST_TIP', payload: newTip});\n        dispatch ({type: 'TIP_MESSAGE', payload: socketMessageData});\n\n\n        setPopTip(false); \n        setTipLoading(false);\n\n        setTipDelivery(true);\n        setTimeout( function() {setTipDelivery(false)}, 2000);\n\n        socket.current.emit(\"sendNotification\", {\n            socketNotificationData        \n        });\n        socket.current.emit(\"patchMessage\", { \n            socketMessageData        \n        });\n\n       \n        \n    } catch(error) {  \n        console.log(error.message);\n    }\n}\n\n\nexport const postTipsAction = (tipData, setpopSure, setpopTip, setTipLoading, setTipDelivery, socket) => async (dispatch) => {\n    console.log(\"Tips Action Act\");\n    try{\n        const {data} = await axs.postTipsApi(tipData); \n        const newTip = data.newTip; \n        const tippedPost = data.tippedPost;\n        const socketNotificationData  = data?.newNotification; \n        console.log(tippedPost);\n         \n    \n        dispatch ({type: 'POST_TIP', payload: newTip});\n\n        setpopSure(false);\n        setpopTip(false); \n        setTipLoading(false); \n\n        setTipDelivery(true);\n        setTimeout( function() {setTipDelivery(false)}, 2000);\n\n        if (newTip.type === 'post'){ \n            dispatch ({type: 'TIP_DIARY', payload: tippedPost}); \n\n                socket.current.emit(\"sendNotification\", {\n                    socketNotificationData        \n                });\n       \n        }  else if (newTip.type === 'review'){\n\n            dispatch ({type: 'TIP_REVIEW', payload: tippedPost});\n\n                socket.current.emit(\"sendNotification\", {\n                    socketNotificationData        \n                });\n        }  else if (newTip.type === 'displayTip'){\n\n            dispatch ({type: 'TIP_DISPLAY_NOTIFICATION', payload: tippedPost});\n\n                socket.current.emit(\"sendNotification\", {\n                    socketNotificationData        \n                });\n        }\n \n       \n        \n    } catch(error) {  \n        console.log(error.message);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}