{"ast":null,"code":"/* eslint-disable no-undef */\nconst resolveURL = require('resolve-url');\n\nconst {\n  log\n} = require('../utils/log');\n/*\n * Fetch data from remote URL and convert to blob URL\n * to avoid CORS issue\n */\n\n\nconst toBlobURL = async (url, mimeType) => {\n  log('info', `fetch ${url}`);\n  const buf = await (await fetch(url)).arrayBuffer();\n  log('info', `${url} file size = ${buf.byteLength} bytes`);\n  const blob = new Blob([buf], {\n    type: mimeType\n  });\n  const blobURL = URL.createObjectURL(blob);\n  log('info', `${url} blob URL = ${blobURL}`);\n  return blobURL;\n};\n\nmodule.exports = async ({\n  corePath: _corePath\n}) => {\n  if (typeof _corePath !== 'string') {\n    throw Error('corePath should be a string!');\n  }\n\n  const coreRemotePath = resolveURL(_corePath);\n  const corePath = await toBlobURL(coreRemotePath, 'application/javascript');\n  const wasmPath = await toBlobURL(coreRemotePath.replace('ffmpeg-core.js', 'ffmpeg-core.wasm'), 'application/wasm');\n  const workerPath = await toBlobURL(coreRemotePath.replace('ffmpeg-core.js', 'ffmpeg-core.worker.js'), 'application/javascript');\n\n  if (typeof createFFmpegCore === 'undefined') {\n    return new Promise(resolve => {\n      const script = document.createElement('script');\n\n      const eventHandler = () => {\n        script.removeEventListener('load', eventHandler);\n        log('info', 'ffmpeg-core.js script loaded');\n        resolve({\n          createFFmpegCore,\n          corePath,\n          wasmPath,\n          workerPath\n        });\n      };\n\n      script.src = corePath;\n      script.type = 'text/javascript';\n      script.addEventListener('load', eventHandler);\n      document.getElementsByTagName('head')[0].appendChild(script);\n    });\n  }\n\n  log('info', 'ffmpeg-core.js script is loaded already');\n  return Promise.resolve({\n    createFFmpegCore,\n    corePath,\n    wasmPath,\n    workerPath\n  });\n};","map":{"version":3,"sources":["/Users/Zoorura/Documents/Projects/Zoorura/zoorura-webClient/node_modules/@ffmpeg/ffmpeg/src/browser/getCreateFFmpegCore.js"],"names":["resolveURL","require","log","toBlobURL","url","mimeType","buf","fetch","arrayBuffer","byteLength","blob","Blob","type","blobURL","URL","createObjectURL","module","exports","corePath","_corePath","Error","coreRemotePath","wasmPath","replace","workerPath","createFFmpegCore","Promise","resolve","script","document","createElement","eventHandler","removeEventListener","src","addEventListener","getElementsByTagName","appendChild"],"mappings":"AAAA;AACA,MAAMA,UAAU,GAAGC,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAM;AAAEC,EAAAA;AAAF,IAAUD,OAAO,CAAC,cAAD,CAAvB;AAEA;AACA;AACA;AACA;;;AACA,MAAME,SAAS,GAAG,OAAOC,GAAP,EAAYC,QAAZ,KAAyB;AACzCH,EAAAA,GAAG,CAAC,MAAD,EAAU,SAAQE,GAAI,EAAtB,CAAH;AACA,QAAME,GAAG,GAAG,MAAM,CAAC,MAAMC,KAAK,CAACH,GAAD,CAAZ,EAAmBI,WAAnB,EAAlB;AACAN,EAAAA,GAAG,CAAC,MAAD,EAAU,GAAEE,GAAI,gBAAeE,GAAG,CAACG,UAAW,QAA9C,CAAH;AACA,QAAMC,IAAI,GAAG,IAAIC,IAAJ,CAAS,CAACL,GAAD,CAAT,EAAgB;AAAEM,IAAAA,IAAI,EAAEP;AAAR,GAAhB,CAAb;AACA,QAAMQ,OAAO,GAAGC,GAAG,CAACC,eAAJ,CAAoBL,IAApB,CAAhB;AACAR,EAAAA,GAAG,CAAC,MAAD,EAAU,GAAEE,GAAI,eAAcS,OAAQ,EAAtC,CAAH;AACA,SAAOA,OAAP;AACD,CARD;;AAUAG,MAAM,CAACC,OAAP,GAAiB,OAAO;AAAEC,EAAAA,QAAQ,EAAEC;AAAZ,CAAP,KAAmC;AAClD,MAAI,OAAOA,SAAP,KAAqB,QAAzB,EAAmC;AACjC,UAAMC,KAAK,CAAC,8BAAD,CAAX;AACD;;AACD,QAAMC,cAAc,GAAGrB,UAAU,CAACmB,SAAD,CAAjC;AACA,QAAMD,QAAQ,GAAG,MAAMf,SAAS,CAC9BkB,cAD8B,EAE9B,wBAF8B,CAAhC;AAIA,QAAMC,QAAQ,GAAG,MAAMnB,SAAS,CAC9BkB,cAAc,CAACE,OAAf,CAAuB,gBAAvB,EAAyC,kBAAzC,CAD8B,EAE9B,kBAF8B,CAAhC;AAIA,QAAMC,UAAU,GAAG,MAAMrB,SAAS,CAChCkB,cAAc,CAACE,OAAf,CAAuB,gBAAvB,EAAyC,uBAAzC,CADgC,EAEhC,wBAFgC,CAAlC;;AAIA,MAAI,OAAOE,gBAAP,KAA4B,WAAhC,EAA6C;AAC3C,WAAO,IAAIC,OAAJ,CAAaC,OAAD,IAAa;AAC9B,YAAMC,MAAM,GAAGC,QAAQ,CAACC,aAAT,CAAuB,QAAvB,CAAf;;AACA,YAAMC,YAAY,GAAG,MAAM;AACzBH,QAAAA,MAAM,CAACI,mBAAP,CAA2B,MAA3B,EAAmCD,YAAnC;AACA7B,QAAAA,GAAG,CAAC,MAAD,EAAS,8BAAT,CAAH;AACAyB,QAAAA,OAAO,CAAC;AACNF,UAAAA,gBADM;AAENP,UAAAA,QAFM;AAGNI,UAAAA,QAHM;AAINE,UAAAA;AAJM,SAAD,CAAP;AAMD,OATD;;AAUAI,MAAAA,MAAM,CAACK,GAAP,GAAaf,QAAb;AACAU,MAAAA,MAAM,CAAChB,IAAP,GAAc,iBAAd;AACAgB,MAAAA,MAAM,CAACM,gBAAP,CAAwB,MAAxB,EAAgCH,YAAhC;AACAF,MAAAA,QAAQ,CAACM,oBAAT,CAA8B,MAA9B,EAAsC,CAAtC,EAAyCC,WAAzC,CAAqDR,MAArD;AACD,KAhBM,CAAP;AAiBD;;AACD1B,EAAAA,GAAG,CAAC,MAAD,EAAS,yCAAT,CAAH;AACA,SAAOwB,OAAO,CAACC,OAAR,CAAgB;AACrBF,IAAAA,gBADqB;AAErBP,IAAAA,QAFqB;AAGrBI,IAAAA,QAHqB;AAIrBE,IAAAA;AAJqB,GAAhB,CAAP;AAMD,CA3CD","sourcesContent":["/* eslint-disable no-undef */\nconst resolveURL = require('resolve-url');\nconst { log } = require('../utils/log');\n\n/*\n * Fetch data from remote URL and convert to blob URL\n * to avoid CORS issue\n */\nconst toBlobURL = async (url, mimeType) => {\n  log('info', `fetch ${url}`);\n  const buf = await (await fetch(url)).arrayBuffer();\n  log('info', `${url} file size = ${buf.byteLength} bytes`);\n  const blob = new Blob([buf], { type: mimeType });\n  const blobURL = URL.createObjectURL(blob);\n  log('info', `${url} blob URL = ${blobURL}`);\n  return blobURL;\n};\n\nmodule.exports = async ({ corePath: _corePath }) => {\n  if (typeof _corePath !== 'string') {\n    throw Error('corePath should be a string!');\n  }\n  const coreRemotePath = resolveURL(_corePath);\n  const corePath = await toBlobURL(\n    coreRemotePath,\n    'application/javascript',\n  );\n  const wasmPath = await toBlobURL(\n    coreRemotePath.replace('ffmpeg-core.js', 'ffmpeg-core.wasm'),\n    'application/wasm',\n  );\n  const workerPath = await toBlobURL(\n    coreRemotePath.replace('ffmpeg-core.js', 'ffmpeg-core.worker.js'),\n    'application/javascript',\n  );\n  if (typeof createFFmpegCore === 'undefined') {\n    return new Promise((resolve) => {\n      const script = document.createElement('script');\n      const eventHandler = () => {\n        script.removeEventListener('load', eventHandler);\n        log('info', 'ffmpeg-core.js script loaded');\n        resolve({\n          createFFmpegCore,\n          corePath,\n          wasmPath,\n          workerPath,\n        });\n      };\n      script.src = corePath;\n      script.type = 'text/javascript';\n      script.addEventListener('load', eventHandler);\n      document.getElementsByTagName('head')[0].appendChild(script);\n    });\n  }\n  log('info', 'ffmpeg-core.js script is loaded already');\n  return Promise.resolve({\n    createFFmpegCore,\n    corePath,\n    wasmPath,\n    workerPath,\n  });\n};\n"]},"metadata":{},"sourceType":"script"}