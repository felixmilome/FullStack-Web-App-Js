{"ast":null,"code":"export const messagesReducer = (messages = [], action) => {\n  switch (action.type) {\n    case 'DELETE_MESSAGE':\n      return messages.filter(message => message._id !== action.payload);\n\n    case 'PATCH_MESSAGE':\n    case 'TIP_MESSAGE':\n      return messages.map(message => message._id === action.payload._id ? action.payload : message);\n\n    case 'GET_ALL_MESSAGES':\n      return messages.concat(action.payload);\n\n    case 'READ_MESSAGES':\n      const markedRead = messages.map(message => message._id === action.payload._id ? action.payload : message);\n      console.log(markedRead);\n      return markedRead;\n\n    case 'SOCKET_GOT_MESSAGE':\n    case 'POST_MESSAGE':\n      return [...messages, action.payload];\n\n    default:\n      return messages;\n  }\n};","map":{"version":3,"sources":["/Users/Zoorura/Documents/Projects/Zoorura/zoorura-webClient/src/components/Midwares/rdx/reducers/messagesReducer.js"],"names":["messagesReducer","messages","action","type","filter","message","_id","payload","map","concat","markedRead","console","log"],"mappings":"AAAA,OAAO,MAAMA,eAAe,GAAG,CAACC,QAAQ,GAAG,EAAZ,EAAgBC,MAAhB,KAA2B;AAEtD,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,gBAAL;AACI,aAAOF,QAAQ,CAACG,MAAT,CAAiBC,OAAD,IAAYA,OAAO,CAACC,GAAR,KAAgBJ,MAAM,CAACK,OAAnD,CAAP;;AACJ,SAAK,eAAL;AACA,SAAK,aAAL;AACI,aAAON,QAAQ,CAACO,GAAT,CAAcH,OAAD,IAAaA,OAAO,CAACC,GAAR,KAAgBJ,MAAM,CAACK,OAAP,CAAeD,GAA/B,GAAqCJ,MAAM,CAACK,OAA5C,GAAsDF,OAAhF,CAAP;;AACJ,SAAK,kBAAL;AAEK,aAAOJ,QAAQ,CAACQ,MAAT,CAAgBP,MAAM,CAACK,OAAvB,CAAP;;AACL,SAAK,eAAL;AAEI,YAAMG,UAAU,GAAGT,QAAQ,CAACO,GAAT,CAAcH,OAAD,IAAaA,OAAO,CAACC,GAAR,KAAgBJ,MAAM,CAACK,OAAP,CAAeD,GAA/B,GAAqCJ,MAAM,CAACK,OAA5C,GAAsDF,OAAhF,CAAnB;AACAM,MAAAA,OAAO,CAACC,GAAR,CAAYF,UAAZ;AACA,aAAOA,UAAP;;AAEJ,SAAK,oBAAL;AACA,SAAK,cAAL;AACI,aAAO,CAAC,GAAGT,QAAJ,EAAcC,MAAM,CAACK,OAArB,CAAP;;AACJ;AACI,aAAON,QAAP;AAnBR;AAsBF,CAxBK","sourcesContent":["export const messagesReducer = (messages = [], action) => {\n     \n    switch(action.type) {\n        case 'DELETE_MESSAGE':\n            return messages.filter((message)=> message._id !== action.payload);\n        case 'PATCH_MESSAGE':\n        case 'TIP_MESSAGE':\n            return messages.map((message) => message._id === action.payload._id ? action.payload : message);\n        case 'GET_ALL_MESSAGES':\n           \n             return messages.concat(action.payload);\n        case 'READ_MESSAGES': \n\n            const markedRead = messages.map((message) => message._id === action.payload._id ? action.payload : message);\n            console.log(markedRead);\n            return markedRead;\n           \n        case 'SOCKET_GOT_MESSAGE':    \n        case 'POST_MESSAGE':\n            return [...messages, action.payload];\n        default:\n            return messages; \n     }\n     \n }"]},"metadata":{},"sourceType":"module"}