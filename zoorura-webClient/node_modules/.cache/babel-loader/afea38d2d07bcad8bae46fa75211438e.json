{"ast":null,"code":"import * as axs from './axs';\nexport const getDiariesAction = () => async dispatch => {\n  try {\n    const {\n      data\n    } = await axs.getDiariesApi();\n    dispatch({\n      type: 'GET_ALL_DIARIES',\n      payload: data\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const postDiariesAction = (diary, setpopPosted, navigate, setDisplayer, setSpam) => async dispatch => {\n  try {\n    const {\n      data\n    } = await axs.postDiariesApi(diary);\n\n    if (data === 'Spam') {\n      setSpam(true);\n    } else {\n      setpopPosted(true);\n      dispatch({\n        type: 'POST_DIARY',\n        payload: data\n      }); //navigate ('/');\n\n      window.location = '/';\n    }\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const postDisplayDiariesAction = (diary, setPopDisplayed, navigate, setDisplayer, setSpam) => async dispatch => {\n  try {\n    const {\n      data\n    } = await axs.postDiariesApi(diary);\n\n    if (data === 'Spam') {\n      setSpam(true);\n      setTimeout(function () {\n        setSpam(false);\n      }, 2000);\n    } else {\n      setPopDisplayed(true);\n      navigate('/');\n      window.location.reload(true);\n    } // const newDisplay = data.newDisplay;\n    // const displayedDiary = data.displayedDiary;\n    // dispatch ({type: 'POST_DIARY', payload: newDisplay});\n    // dispatch ({type: 'DIARY_DISPLAY', payload: displayedDiary});\n    // setDisplayer(true);\n    // setTimeout( function() {setDisplayer (false)}, 2000); \n\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const patchDiariesAction = (id, diariesEditData, setSpam) => async dispatch => {\n  try {\n    const {\n      data\n    } = await axs.patchDiariesApi(id, diariesEditData);\n\n    if (data === 'Spam') {\n      setSpam(true);\n      setTimeout(function () {\n        setSpam(false);\n      }, 2000);\n    } else {\n      dispatch({\n        type: 'PATCH_DIARY',\n        payload: data\n      });\n      setpopPosted(true);\n      setTimeout(function () {\n        setpopOptions(false);\n      }, 2000);\n    }\n  } catch (error) {\n    console.log(error); // console.log(diariesEditData);\n    // console.log(id);\n  }\n};\nexport const deleteDiariesAction = id => async dispatch => {\n  try {\n    await axs.deleteDiariesApi(id);\n    dispatch({\n      type: 'DELETE_DIARY',\n      payload: id\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const tipDiariesAction = (id, tipperData, setpopSure, setpopTip) => async dispatch => {\n  try {\n    const {\n      data\n    } = await axs.tipDiariesApi(id, tipperData);\n    dispatch({\n      type: 'TIP_DIARY',\n      payload: data\n    }); // if(dispatch)\n    // {\n\n    setpopSure(false);\n    setpopTip(false); //}\n  } catch (error) {\n    console.log(error);\n  }\n};\nexport const reviewDiariesAction = (id, reviewData, setreviewData) => async dispatch => {\n  try {\n    const {\n      data\n    } = await axs.reviewDiariesApi(id, reviewData);\n    dispatch({\n      type: 'REVIEW_DIARY',\n      payload: data\n    });\n    setreviewData({\n      reviewer: '',\n      reviewerId: '',\n      body: ''\n    });\n  } catch (error) {\n    console.log(error);\n  }\n};","map":{"version":3,"sources":["/Users/Zoorura/Documents/Projects/Zoorura/zoorura-webClient/src/components/Midwares/rdx/actions/diariesAction.js"],"names":["axs","getDiariesAction","dispatch","data","getDiariesApi","type","payload","error","console","log","postDiariesAction","diary","setpopPosted","navigate","setDisplayer","setSpam","postDiariesApi","window","location","postDisplayDiariesAction","setPopDisplayed","setTimeout","reload","patchDiariesAction","id","diariesEditData","patchDiariesApi","setpopOptions","deleteDiariesAction","deleteDiariesApi","tipDiariesAction","tipperData","setpopSure","setpopTip","tipDiariesApi","reviewDiariesAction","reviewData","setreviewData","reviewDiariesApi","reviewer","reviewerId","body"],"mappings":"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","sourcesContent":["import * as axs from './axs';\n\n \nexport const getDiariesAction = () => async (dispatch) => {\n    try{\n        const {data} = await axs.getDiariesApi();\n\n        dispatch ({type: 'GET_ALL_DIARIES', payload: data});\n    } catch(error) {\n        console.log(error); \n    }\n}\nexport const postDiariesAction = (diary, setpopPosted, navigate, setDisplayer, setSpam) => async (dispatch) => {\n    try{\n        \n\n            const {data} = await axs.postDiariesApi(diary);\n\n            if (data === 'Spam'){\n                setSpam (true);\n                \n            }else{\n                setpopPosted(true);\n\n                dispatch ({type: 'POST_DIARY', payload: data});            \n                //navigate ('/');\n                window.location = ('/') \n            }\n\n        \n    } catch(error) {\n        console.log(error);\n    }\n}\nexport const postDisplayDiariesAction = (diary, setPopDisplayed, navigate, setDisplayer, setSpam) => async (dispatch) => {\n    try{\n        \n\n\n            const {data} = await axs.postDiariesApi(diary);\n\n            if (data === 'Spam'){\n                setSpam (true);\n                setTimeout( function() {setSpam (false)}, 2000); \n            }else{\n            \n            setPopDisplayed(true);\n            navigate ('/');\n            window.location.reload(true); \n            }\n\n\n\n            // const newDisplay = data.newDisplay;\n            // const displayedDiary = data.displayedDiary;\n\n            // dispatch ({type: 'POST_DIARY', payload: newDisplay});\n            // dispatch ({type: 'DIARY_DISPLAY', payload: displayedDiary});\n            // setDisplayer(true);\n            // setTimeout( function() {setDisplayer (false)}, 2000); \n      \n\n        \n    } catch(error) {\n        console.log(error);\n    }\n}\nexport const patchDiariesAction = (id, diariesEditData, setSpam) => async (dispatch)=>{\n    try{\n        const {data} = await axs.patchDiariesApi(id, diariesEditData); \n        if (data === 'Spam'){\n            setSpam (true);\n            setTimeout( function() {setSpam (false)}, 2000); \n        }else{\n            dispatch ({type: 'PATCH_DIARY', payload: data});\n            setpopPosted(true);\n            setTimeout( function() {setpopOptions(false)}, 2000);\n        }\n    } catch(error){\n        console.log(error);\n        // console.log(diariesEditData);\n        // console.log(id);\n    }\n}\n\nexport const deleteDiariesAction = (id) => async (dispatch) =>{\n        try{\n            await axs.deleteDiariesApi(id);\n            dispatch({type: 'DELETE_DIARY', payload: id});\n\n        } catch(error){\n            console.log(error);\n        }\n}\n\n\nexport const tipDiariesAction = (id, tipperData, setpopSure, setpopTip) => async (dispatch)=>{\n    try{\n        const {data} = await axs.tipDiariesApi(id, tipperData);  \n       \n        dispatch ({type: 'TIP_DIARY', payload: data});\n        // if(dispatch)\n        // {\n        setpopSure(false);\n        setpopTip(false);\n        //}\n        \n    } catch(error){\n        console.log(error);\n     \n    }\n}\nexport const reviewDiariesAction = (id, reviewData, setreviewData) => async (dispatch)=>{\n    try{\n        const {data} = await axs.reviewDiariesApi(id, reviewData); \n        \n        dispatch ({type: 'REVIEW_DIARY', payload: data});\n\n        setreviewData({reviewer:'', reviewerId:'', body: ''});\n    } catch(error){\n        console.log(error);\n       \n    }\n}\n"]},"metadata":{},"sourceType":"module"}